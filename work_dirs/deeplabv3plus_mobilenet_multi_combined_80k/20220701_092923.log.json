{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA TITAN V\nGPU 1: Quadro P6000\nGPU 2,3: NVIDIA TITAN X (Pascal)\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.6.0\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.25.0+ebccdb8", "seed": 1354119562, "exp_name": "deeplabv3plus_mobilenet_multi_combined_80k.py", "mmseg_version": "0.25.0+ebccdb8", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='MultiEncoderDecoder',\n    pretrained='open-mmlab://contrib/mobilenet_v3_large',\n    backbone=dict(\n        type='MobileNetV3',\n        arch='large',\n        out_indices=(1, 3, 16),\n        norm_cfg=dict(type='SyncBN', eps=0.001, requires_grad=True),\n        pretrained='open-mmlab://contrib/mobilenet_v3_large'),\n    decode_head=dict(\n        type='MultiDepthwiseSeparableASPPHead',\n        in_channels=960,\n        in_index=2,\n        channels=128,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=16,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='CombinedCrossEntropyLoss', loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=960,\n        in_index=2,\n        channels=128,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'ADE20KDataset'\ndata_root = './FoodSeg103/Images'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=12,\n    train=dict(\n        type='ADE20KDataset',\n        data_root='./SegCombined/Images',\n        img_dir='img_dir/train',\n        ann_dir='ann_dir/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='ADE20KDataset',\n        data_root='./SegCombined/Images',\n        img_dir='img_dir/test',\n        ann_dir='ann_dir/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ADE20KDataset',\n        data_root='./SegCombined/Images',\n        img_dir='img_dir/test',\n        ann_dir='ann_dir/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = './work_dirs/deeplabv3plus_mobilenet_multi_combined_80k/latest.pth'\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=5000, save_optimizer=True)\nevaluation = dict(interval=5000, metric='mIoU', pre_eval=True)\nseed = 1354119562\nwork_dir = './work_dirs/deeplabv3plus_mobilenet_multi_combined_80k'\ngpu_ids = range(0, 4)\nauto_resume = False\ndevice = 'cuda'\n", "CLASSES": ["Background", "Meat", "Nuts/seeds", "Eggs", "Beans/lentils/peas", "Fruit", "Grain", "Vegetables", "Dairy", "Sauce/Spread", "Soup/Drink"], "PALETTE": null}
{"mode": "train", "epoch": 1, "iter": 55000, "lr": 0.00358, "memory": 15901, "data_time": 2.71039, "decode.loss_ce_combined": 0.40954, "decode.acc_seg": 89.51919, "decode.bin_ce_loss": 0.14519, "aux.loss_ce": 0.13692, "aux.acc_seg": 86.32065, "loss": 0.69164, "time": 9.24814}
{"mode": "val", "epoch": 1, "iter": 503, "lr": 0.00358, "aAcc": 0.8433, "mIoU": 0.4688, "mAcc": 0.6203, "IoU.Background": 0.9036, "IoU.Meat": 0.6653, "IoU.Nuts/seeds": 0.412, "IoU.Eggs": 0.3594, "IoU.Beans/lentils/peas": 0.1331, "IoU.Fruit": 0.5376, "IoU.Grain": 0.547, "IoU.Vegetables": 0.6427, "IoU.Dairy": 0.2802, "IoU.Sauce/Spread": 0.2451, "IoU.Soup/Drink": 0.431, "Acc.Background": 0.9521, "Acc.Meat": 0.7854, "Acc.Nuts/seeds": 0.6736, "Acc.Eggs": 0.6561, "Acc.Beans/lentils/peas": 0.1825, "Acc.Fruit": 0.6274, "Acc.Grain": 0.6656, "Acc.Vegetables": 0.8176, "Acc.Dairy": 0.4314, "Acc.Sauce/Spread": 0.4278, "Acc.Soup/Drink": 0.6037}
{"mode": "train", "epoch": 1, "iter": 55100, "lr": 0.00356, "memory": 19740, "data_time": 2.85506, "decode.loss_ce_combined": 0.55041, "decode.acc_seg": 85.67047, "decode.bin_ce_loss": 0.16466, "aux.loss_ce": 0.18983, "aux.acc_seg": 82.75901, "loss": 0.9049, "time": 3.23058}
{"mode": "train", "epoch": 1, "iter": 55200, "lr": 0.00355, "memory": 19740, "data_time": 0.00606, "decode.loss_ce_combined": 0.56741, "decode.acc_seg": 85.03154, "decode.bin_ce_loss": 0.17222, "aux.loss_ce": 0.19468, "aux.acc_seg": 81.89901, "loss": 0.9343, "time": 0.38822}
{"mode": "train", "epoch": 1, "iter": 55300, "lr": 0.00354, "memory": 19740, "data_time": 0.00606, "decode.loss_ce_combined": 0.54449, "decode.acc_seg": 85.47428, "decode.bin_ce_loss": 0.16473, "aux.loss_ce": 0.18782, "aux.acc_seg": 82.39756, "loss": 0.89704, "time": 0.38401}
{"mode": "train", "epoch": 2, "iter": 55400, "lr": 0.00353, "memory": 19740, "data_time": 0.05548, "decode.loss_ce_combined": 0.52841, "decode.acc_seg": 86.00455, "decode.bin_ce_loss": 0.15849, "aux.loss_ce": 0.18245, "aux.acc_seg": 83.04302, "loss": 0.86935, "time": 0.43746}
{"mode": "train", "epoch": 2, "iter": 55500, "lr": 0.00351, "memory": 19740, "data_time": 0.0061, "decode.loss_ce_combined": 0.54128, "decode.acc_seg": 85.6085, "decode.bin_ce_loss": 0.1648, "aux.loss_ce": 0.18355, "aux.acc_seg": 82.88128, "loss": 0.88963, "time": 0.38797}
{"mode": "train", "epoch": 2, "iter": 55600, "lr": 0.0035, "memory": 19740, "data_time": 0.00614, "decode.loss_ce_combined": 0.54297, "decode.acc_seg": 85.69441, "decode.bin_ce_loss": 0.16633, "aux.loss_ce": 0.18742, "aux.acc_seg": 82.41489, "loss": 0.89672, "time": 0.39053}
{"mode": "train", "epoch": 3, "iter": 55700, "lr": 0.00349, "memory": 19740, "data_time": 0.03963, "decode.loss_ce_combined": 0.53444, "decode.acc_seg": 85.92273, "decode.bin_ce_loss": 0.16487, "aux.loss_ce": 0.18637, "aux.acc_seg": 82.61456, "loss": 0.88568, "time": 0.4385}
{"mode": "train", "epoch": 3, "iter": 55800, "lr": 0.00348, "memory": 19740, "data_time": 0.00596, "decode.loss_ce_combined": 0.54272, "decode.acc_seg": 85.78719, "decode.bin_ce_loss": 0.16671, "aux.loss_ce": 0.18681, "aux.acc_seg": 82.71171, "loss": 0.89624, "time": 0.39067}
{"mode": "train", "epoch": 3, "iter": 55900, "lr": 0.00346, "memory": 19740, "data_time": 0.00604, "decode.loss_ce_combined": 0.55241, "decode.acc_seg": 85.15, "decode.bin_ce_loss": 0.16284, "aux.loss_ce": 0.1924, "aux.acc_seg": 82.36717, "loss": 0.90765, "time": 0.38914}
{"mode": "train", "epoch": 4, "iter": 56000, "lr": 0.00345, "memory": 19740, "data_time": 0.0484, "decode.loss_ce_combined": 0.54236, "decode.acc_seg": 85.16178, "decode.bin_ce_loss": 0.15561, "aux.loss_ce": 0.19157, "aux.acc_seg": 82.25093, "loss": 0.88954, "time": 0.4364}
{"mode": "train", "epoch": 4, "iter": 56100, "lr": 0.00344, "memory": 19740, "data_time": 0.00605, "decode.loss_ce_combined": 0.54667, "decode.acc_seg": 85.32112, "decode.bin_ce_loss": 0.15825, "aux.loss_ce": 0.19215, "aux.acc_seg": 82.09297, "loss": 0.89707, "time": 0.38879}
{"mode": "train", "epoch": 4, "iter": 56200, "lr": 0.00342, "memory": 19740, "data_time": 0.0061, "decode.loss_ce_combined": 0.53245, "decode.acc_seg": 86.16066, "decode.bin_ce_loss": 0.16749, "aux.loss_ce": 0.18193, "aux.acc_seg": 83.23792, "loss": 0.88188, "time": 0.38932}
{"mode": "train", "epoch": 5, "iter": 56300, "lr": 0.00341, "memory": 19740, "data_time": 0.04071, "decode.loss_ce_combined": 0.56142, "decode.acc_seg": 85.03586, "decode.bin_ce_loss": 0.16731, "aux.loss_ce": 0.19339, "aux.acc_seg": 81.95841, "loss": 0.92212, "time": 0.44447}
{"mode": "train", "epoch": 5, "iter": 56400, "lr": 0.0034, "memory": 19740, "data_time": 0.00619, "decode.loss_ce_combined": 0.51982, "decode.acc_seg": 86.04863, "decode.bin_ce_loss": 0.15345, "aux.loss_ce": 0.18406, "aux.acc_seg": 82.79651, "loss": 0.85733, "time": 0.38897}
{"mode": "train", "epoch": 5, "iter": 56500, "lr": 0.00339, "memory": 19740, "data_time": 0.00603, "decode.loss_ce_combined": 0.54941, "decode.acc_seg": 85.6164, "decode.bin_ce_loss": 0.16647, "aux.loss_ce": 0.19018, "aux.acc_seg": 82.34999, "loss": 0.90606, "time": 0.39652}
{"mode": "train", "epoch": 5, "iter": 56600, "lr": 0.00337, "memory": 19740, "data_time": 0.0062, "decode.loss_ce_combined": 0.5103, "decode.acc_seg": 86.4561, "decode.bin_ce_loss": 0.15471, "aux.loss_ce": 0.17702, "aux.acc_seg": 83.54828, "loss": 0.84204, "time": 0.39142}
{"mode": "train", "epoch": 6, "iter": 56700, "lr": 0.00336, "memory": 19740, "data_time": 0.03938, "decode.loss_ce_combined": 0.51051, "decode.acc_seg": 86.41828, "decode.bin_ce_loss": 0.15537, "aux.loss_ce": 0.17938, "aux.acc_seg": 83.44841, "loss": 0.84525, "time": 0.44383}
{"mode": "train", "epoch": 6, "iter": 56800, "lr": 0.00335, "memory": 19740, "data_time": 0.00592, "decode.loss_ce_combined": 0.53397, "decode.acc_seg": 85.66867, "decode.bin_ce_loss": 0.15968, "aux.loss_ce": 0.18693, "aux.acc_seg": 82.59324, "loss": 0.88058, "time": 0.39233}
{"mode": "train", "epoch": 6, "iter": 56900, "lr": 0.00334, "memory": 19740, "data_time": 0.00604, "decode.loss_ce_combined": 0.51387, "decode.acc_seg": 86.57394, "decode.bin_ce_loss": 0.15975, "aux.loss_ce": 0.18229, "aux.acc_seg": 83.02025, "loss": 0.85591, "time": 0.38998}
{"mode": "train", "epoch": 7, "iter": 57000, "lr": 0.00332, "memory": 19740, "data_time": 0.03599, "decode.loss_ce_combined": 0.50957, "decode.acc_seg": 86.30051, "decode.bin_ce_loss": 0.15764, "aux.loss_ce": 0.1793, "aux.acc_seg": 83.09808, "loss": 0.8465, "time": 0.44268}
{"mode": "train", "epoch": 7, "iter": 57100, "lr": 0.00331, "memory": 19740, "data_time": 0.00621, "decode.loss_ce_combined": 0.54314, "decode.acc_seg": 85.57147, "decode.bin_ce_loss": 0.16494, "aux.loss_ce": 0.18673, "aux.acc_seg": 82.6987, "loss": 0.89481, "time": 0.39351}
{"mode": "train", "epoch": 7, "iter": 57200, "lr": 0.0033, "memory": 19740, "data_time": 0.0061, "decode.loss_ce_combined": 0.55029, "decode.acc_seg": 85.21207, "decode.bin_ce_loss": 0.16329, "aux.loss_ce": 0.1937, "aux.acc_seg": 81.90001, "loss": 0.90729, "time": 0.38953}
{"mode": "train", "epoch": 8, "iter": 57300, "lr": 0.00329, "memory": 19740, "data_time": 0.04483, "decode.loss_ce_combined": 0.51337, "decode.acc_seg": 86.35177, "decode.bin_ce_loss": 0.16223, "aux.loss_ce": 0.17711, "aux.acc_seg": 83.20582, "loss": 0.85271, "time": 0.44004}
{"mode": "train", "epoch": 8, "iter": 57400, "lr": 0.00327, "memory": 19740, "data_time": 0.00619, "decode.loss_ce_combined": 0.51731, "decode.acc_seg": 86.39252, "decode.bin_ce_loss": 0.15651, "aux.loss_ce": 0.183, "aux.acc_seg": 83.05104, "loss": 0.85683, "time": 0.39272}
{"mode": "train", "epoch": 8, "iter": 57500, "lr": 0.00326, "memory": 19740, "data_time": 0.00601, "decode.loss_ce_combined": 0.50652, "decode.acc_seg": 86.29899, "decode.bin_ce_loss": 0.15168, "aux.loss_ce": 0.17852, "aux.acc_seg": 83.34565, "loss": 0.83672, "time": 0.39267}
{"mode": "train", "epoch": 9, "iter": 57600, "lr": 0.00325, "memory": 19740, "data_time": 0.04871, "decode.loss_ce_combined": 0.53411, "decode.acc_seg": 85.75514, "decode.bin_ce_loss": 0.1579, "aux.loss_ce": 0.18757, "aux.acc_seg": 82.85807, "loss": 0.87958, "time": 0.44774}
{"mode": "train", "epoch": 9, "iter": 57700, "lr": 0.00324, "memory": 19740, "data_time": 0.00605, "decode.loss_ce_combined": 0.52712, "decode.acc_seg": 85.98076, "decode.bin_ce_loss": 0.16137, "aux.loss_ce": 0.18395, "aux.acc_seg": 82.73414, "loss": 0.87244, "time": 0.39396}
{"mode": "train", "epoch": 9, "iter": 57800, "lr": 0.00322, "memory": 19740, "data_time": 0.0061, "decode.loss_ce_combined": 0.52722, "decode.acc_seg": 86.071, "decode.bin_ce_loss": 0.15612, "aux.loss_ce": 0.1845, "aux.acc_seg": 83.12648, "loss": 0.86783, "time": 0.39505}
{"mode": "train", "epoch": 10, "iter": 57900, "lr": 0.00321, "memory": 19740, "data_time": 0.04056, "decode.loss_ce_combined": 0.52313, "decode.acc_seg": 86.25183, "decode.bin_ce_loss": 0.1645, "aux.loss_ce": 0.17902, "aux.acc_seg": 83.07902, "loss": 0.86665, "time": 0.44708}
{"mode": "train", "epoch": 10, "iter": 58000, "lr": 0.0032, "memory": 19740, "data_time": 0.00608, "decode.loss_ce_combined": 0.51729, "decode.acc_seg": 86.12557, "decode.bin_ce_loss": 0.15628, "aux.loss_ce": 0.18229, "aux.acc_seg": 82.95511, "loss": 0.85586, "time": 0.38759}
{"mode": "train", "epoch": 10, "iter": 58100, "lr": 0.00319, "memory": 19740, "data_time": 0.00608, "decode.loss_ce_combined": 0.52053, "decode.acc_seg": 85.97064, "decode.bin_ce_loss": 0.1543, "aux.loss_ce": 0.18141, "aux.acc_seg": 83.10616, "loss": 0.85624, "time": 0.39509}
{"mode": "train", "epoch": 10, "iter": 58200, "lr": 0.00317, "memory": 19740, "data_time": 0.00629, "decode.loss_ce_combined": 0.53185, "decode.acc_seg": 85.74241, "decode.bin_ce_loss": 0.16175, "aux.loss_ce": 0.18566, "aux.acc_seg": 82.69281, "loss": 0.87926, "time": 0.39754}
{"mode": "train", "epoch": 11, "iter": 58300, "lr": 0.00316, "memory": 19740, "data_time": 0.04206, "decode.loss_ce_combined": 0.54564, "decode.acc_seg": 85.34732, "decode.bin_ce_loss": 0.15978, "aux.loss_ce": 0.1914, "aux.acc_seg": 82.26921, "loss": 0.89681, "time": 0.44089}
{"mode": "train", "epoch": 11, "iter": 58400, "lr": 0.00315, "memory": 19740, "data_time": 0.00603, "decode.loss_ce_combined": 0.50091, "decode.acc_seg": 86.7534, "decode.bin_ce_loss": 0.15284, "aux.loss_ce": 0.17947, "aux.acc_seg": 83.23865, "loss": 0.83322, "time": 0.39352}
{"mode": "train", "epoch": 11, "iter": 58500, "lr": 0.00313, "memory": 19740, "data_time": 0.00608, "decode.loss_ce_combined": 0.5329, "decode.acc_seg": 85.65678, "decode.bin_ce_loss": 0.16533, "aux.loss_ce": 0.18386, "aux.acc_seg": 82.37123, "loss": 0.88209, "time": 0.3972}
{"mode": "train", "epoch": 12, "iter": 58600, "lr": 0.00312, "memory": 19740, "data_time": 0.04135, "decode.loss_ce_combined": 0.52623, "decode.acc_seg": 86.09803, "decode.bin_ce_loss": 0.15804, "aux.loss_ce": 0.18661, "aux.acc_seg": 82.75711, "loss": 0.87089, "time": 0.4368}
{"mode": "train", "epoch": 12, "iter": 58700, "lr": 0.00311, "memory": 19740, "data_time": 0.00613, "decode.loss_ce_combined": 0.49891, "decode.acc_seg": 86.56422, "decode.bin_ce_loss": 0.15324, "aux.loss_ce": 0.1756, "aux.acc_seg": 83.58461, "loss": 0.82774, "time": 0.3944}
{"mode": "train", "epoch": 12, "iter": 58800, "lr": 0.0031, "memory": 19740, "data_time": 0.0062, "decode.loss_ce_combined": 0.50321, "decode.acc_seg": 86.29763, "decode.bin_ce_loss": 0.15158, "aux.loss_ce": 0.18102, "aux.acc_seg": 82.98595, "loss": 0.83581, "time": 0.39549}
{"mode": "train", "epoch": 13, "iter": 58900, "lr": 0.00308, "memory": 19740, "data_time": 0.037, "decode.loss_ce_combined": 0.52925, "decode.acc_seg": 85.68196, "decode.bin_ce_loss": 0.15935, "aux.loss_ce": 0.18483, "aux.acc_seg": 82.59198, "loss": 0.87344, "time": 0.44244}
{"mode": "train", "epoch": 13, "iter": 59000, "lr": 0.00307, "memory": 19740, "data_time": 0.00622, "decode.loss_ce_combined": 0.50558, "decode.acc_seg": 86.52185, "decode.bin_ce_loss": 0.15063, "aux.loss_ce": 0.18181, "aux.acc_seg": 83.28899, "loss": 0.83801, "time": 0.39113}
{"mode": "train", "epoch": 13, "iter": 59100, "lr": 0.00306, "memory": 19740, "data_time": 0.00622, "decode.loss_ce_combined": 0.54828, "decode.acc_seg": 85.28859, "decode.bin_ce_loss": 0.16535, "aux.loss_ce": 0.18959, "aux.acc_seg": 82.12656, "loss": 0.90323, "time": 0.39289}
{"mode": "train", "epoch": 14, "iter": 59200, "lr": 0.00305, "memory": 19740, "data_time": 0.04253, "decode.loss_ce_combined": 0.52756, "decode.acc_seg": 85.86024, "decode.bin_ce_loss": 0.15713, "aux.loss_ce": 0.18664, "aux.acc_seg": 82.61588, "loss": 0.87132, "time": 0.4429}
{"mode": "train", "epoch": 14, "iter": 59300, "lr": 0.00303, "memory": 19740, "data_time": 0.00623, "decode.loss_ce_combined": 0.50957, "decode.acc_seg": 86.26798, "decode.bin_ce_loss": 0.1524, "aux.loss_ce": 0.17915, "aux.acc_seg": 83.26391, "loss": 0.84112, "time": 0.39271}
{"mode": "train", "epoch": 14, "iter": 59400, "lr": 0.00302, "memory": 19740, "data_time": 0.00617, "decode.loss_ce_combined": 0.50719, "decode.acc_seg": 86.21731, "decode.bin_ce_loss": 0.15212, "aux.loss_ce": 0.18138, "aux.acc_seg": 82.69833, "loss": 0.84069, "time": 0.39511}
{"mode": "train", "epoch": 14, "iter": 59500, "lr": 0.00301, "memory": 19740, "data_time": 0.00604, "decode.loss_ce_combined": 0.52149, "decode.acc_seg": 86.34262, "decode.bin_ce_loss": 0.15706, "aux.loss_ce": 0.18296, "aux.acc_seg": 83.09701, "loss": 0.86151, "time": 0.39218}
{"mode": "train", "epoch": 15, "iter": 59600, "lr": 0.00299, "memory": 19740, "data_time": 0.03836, "decode.loss_ce_combined": 0.49793, "decode.acc_seg": 86.77881, "decode.bin_ce_loss": 0.15362, "aux.loss_ce": 0.17775, "aux.acc_seg": 83.25587, "loss": 0.82929, "time": 0.44402}
{"mode": "train", "epoch": 15, "iter": 59700, "lr": 0.00298, "memory": 19740, "data_time": 0.00615, "decode.loss_ce_combined": 0.48587, "decode.acc_seg": 86.96766, "decode.bin_ce_loss": 0.14561, "aux.loss_ce": 0.17542, "aux.acc_seg": 83.6984, "loss": 0.8069, "time": 0.39533}
{"mode": "train", "epoch": 15, "iter": 59800, "lr": 0.00297, "memory": 19740, "data_time": 0.00623, "decode.loss_ce_combined": 0.50939, "decode.acc_seg": 86.50752, "decode.bin_ce_loss": 0.15702, "aux.loss_ce": 0.18116, "aux.acc_seg": 83.25258, "loss": 0.84757, "time": 0.39336}
{"mode": "train", "epoch": 16, "iter": 59900, "lr": 0.00296, "memory": 19740, "data_time": 0.04173, "decode.loss_ce_combined": 0.49731, "decode.acc_seg": 86.68487, "decode.bin_ce_loss": 0.14909, "aux.loss_ce": 0.1782, "aux.acc_seg": 83.59514, "loss": 0.8246, "time": 0.43998}
{"mode": "train", "epoch": 16, "iter": 60000, "lr": 0.00294, "memory": 19740, "data_time": 0.0062, "decode.loss_ce_combined": 0.50259, "decode.acc_seg": 86.66357, "decode.bin_ce_loss": 0.14882, "aux.loss_ce": 0.17891, "aux.acc_seg": 83.44919, "loss": 0.83032, "time": 0.40367}
