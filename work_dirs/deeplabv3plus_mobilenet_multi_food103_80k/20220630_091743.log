2022-06-30 09:17:43,979 - mmseg - INFO - Multi-processing start method is `None`
2022-06-30 09:17:43,979 - mmseg - INFO - OpenCV num_threads is `<built-in function getNumThreads>
2022-06-30 09:17:43,979 - mmseg - INFO - OMP num threads is 1
2022-06-30 09:17:44,058 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA TITAN V
GPU 1: Quadro P6000
GPU 2,3: NVIDIA TITAN X (Pascal)
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.7, V11.7.64
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.6.0
MMCV: 1.5.3
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.25.0+cc436a5
------------------------------------------------------------

2022-06-30 09:17:44,058 - mmseg - INFO - Distributed training: True
2022-06-30 09:17:44,592 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='MultiEncoderDecoder',
    pretrained='open-mmlab://contrib/mobilenet_v3_large',
    backbone=dict(
        type='MobileNetV3',
        arch='large',
        out_indices=(1, 3, 16),
        norm_cfg=dict(type='SyncBN', eps=0.001, requires_grad=True)),
    decode_head=dict(
        type='MultiDepthwiseSeparableASPPHead',
        in_channels=960,
        in_index=2,
        channels=128,
        dilations=(1, 12, 24, 36),
        c1_in_channels=16,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=11,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(type='CombinedCrossEntropyLoss', loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=960,
        in_index=2,
        channels=128,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=11,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'ADE20KDataset'
data_root = './FoodSeg103/Images'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=12,
    train=dict(
        type='ADE20KDataset',
        data_root='./FoodSeg103/Images',
        img_dir='img_dir_edited/train',
        ann_dir='ann_dir_edited/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='ADE20KDataset',
        data_root='./FoodSeg103/Images',
        img_dir='img_dir_edited/test',
        ann_dir='ann_dir_edited/test',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='ADE20KDataset',
        data_root='./FoodSeg103/Images',
        img_dir='img_dir_edited/test',
        ann_dir='ann_dir_edited/test',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = './work_dirs/deeplabv3plus_mobilenet_multi_food103_80k/latest.pth'
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=80000)
checkpoint_config = dict(by_epoch=False, interval=5000, save_optimizer=True)
evaluation = dict(interval=5000, metric='mIoU', pre_eval=True)
seed = 0
work_dir = './work_dirs/deeplabv3plus_mobilenet_multi_food103_80k'
gpu_ids = range(0, 4)
auto_resume = False

2022-06-30 09:17:54,048 - mmseg - INFO - Set random seed to 1493201656, deterministic: False
2022-06-30 09:17:54,433 - mmseg - INFO - initialize MobileNetV3 with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://contrib/mobilenet_v3_large'}
2022-06-30 09:17:54,533 - mmseg - INFO - initialize MultiDepthwiseSeparableASPPHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2022-06-30 09:17:54,546 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.layer0.conv.weight - torch.Size([16, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer0.bn.weight - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer0.bn.bias - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.depthwise_conv.conv.weight - torch.Size([16, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.depthwise_conv.bn.weight - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.depthwise_conv.bn.bias - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.linear_conv.conv.weight - torch.Size([16, 16, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.linear_conv.bn.weight - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.linear_conv.bn.bias - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.expand_conv.conv.weight - torch.Size([64, 16, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.expand_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.expand_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.depthwise_conv.conv.weight - torch.Size([64, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.depthwise_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.depthwise_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.linear_conv.conv.weight - torch.Size([24, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.expand_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.expand_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.depthwise_conv.conv.weight - torch.Size([72, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.depthwise_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.depthwise_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.linear_conv.conv.weight - torch.Size([24, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.expand_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.expand_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.depthwise_conv.conv.weight - torch.Size([72, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.depthwise_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.depthwise_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv1.conv.weight - torch.Size([24, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv1.conv.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv2.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv2.conv.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.linear_conv.conv.weight - torch.Size([40, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.expand_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.expand_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.depthwise_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.depthwise_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv1.conv.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv2.conv.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.expand_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.expand_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.depthwise_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.depthwise_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv1.conv.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv2.conv.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.expand_conv.bn.weight - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.expand_conv.bn.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.depthwise_conv.conv.weight - torch.Size([240, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.depthwise_conv.bn.weight - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.depthwise_conv.bn.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.linear_conv.conv.weight - torch.Size([80, 240, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.expand_conv.conv.weight - torch.Size([200, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.expand_conv.bn.weight - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.expand_conv.bn.bias - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.depthwise_conv.conv.weight - torch.Size([200, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.depthwise_conv.bn.weight - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.depthwise_conv.bn.bias - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.linear_conv.conv.weight - torch.Size([80, 200, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.expand_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.expand_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.depthwise_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.depthwise_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.expand_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.expand_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.depthwise_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.depthwise_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.expand_conv.conv.weight - torch.Size([480, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.expand_conv.bn.weight - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.expand_conv.bn.bias - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.depthwise_conv.conv.weight - torch.Size([480, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.depthwise_conv.bn.weight - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.depthwise_conv.bn.bias - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv1.conv.weight - torch.Size([120, 480, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv1.conv.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv2.conv.weight - torch.Size([480, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv2.conv.bias - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.linear_conv.conv.weight - torch.Size([112, 480, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.linear_conv.bn.weight - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.linear_conv.bn.bias - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.expand_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.expand_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.depthwise_conv.conv.weight - torch.Size([672, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.depthwise_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.depthwise_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv1.conv.bias - torch.Size([168]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv2.conv.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.linear_conv.conv.weight - torch.Size([112, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.linear_conv.bn.weight - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.linear_conv.bn.bias - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.expand_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.expand_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.depthwise_conv.conv.weight - torch.Size([672, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.depthwise_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.depthwise_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv1.conv.bias - torch.Size([168]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv2.conv.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.linear_conv.conv.weight - torch.Size([160, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv1.conv.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv2.conv.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv1.conv.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv2.conv.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer16.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer16.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer16.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

decode_head.conv_seg.weight - torch.Size([11, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.image_pool.1.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.image_pool.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.image_pool.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.0.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([128, 640, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.multi_label_classifier.weight - torch.Size([10, 960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.multi_label_classifier.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.c1_bottleneck.conv.weight - torch.Size([48, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.c1_bottleneck.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.c1_bottleneck.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.conv.weight - torch.Size([176, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.weight - torch.Size([176]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.bias - torch.Size([176]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.conv.weight - torch.Size([128, 176, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([11, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([128, 960, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  
2022-06-30 09:17:54,554 - mmseg - INFO - MultiEncoderDecoder(
  (backbone): MobileNetV3(
    (layer0): ConvModule(
      (conv): Conv2dAdaptivePadding(3, 16, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): SyncBatchNorm(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      (activate): Hardswish()
    )
    (layer1): InvertedResidualV3(
      (depthwise_conv): ConvModule(
        (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
        (bn): SyncBatchNorm(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(64, 64, kernel_size=(3, 3), stride=(2, 2), groups=64, bias=False)
        (bn): SyncBatchNorm(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(72, 72, kernel_size=(5, 5), stride=(2, 2), groups=72, bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(72, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer5): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer6): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer7): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(240, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(240, 240, kernel_size=(3, 3), stride=(1, 1), dilation=(2, 2), groups=240, bias=False)
        (bn): SyncBatchNorm(240, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer8): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 200, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(200, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=200, bias=False)
        (bn): SyncBatchNorm(200, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(200, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer9): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=184, bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer10): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=184, bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer11): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(480, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=480, bias=False)
        (bn): SyncBatchNorm(480, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(112, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer12): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=672, bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(112, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer13): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(672, 672, kernel_size=(5, 5), stride=(1, 1), dilation=(4, 4), groups=672, bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(672, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer14): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(960, 960, kernel_size=(5, 5), stride=(1, 1), padding=(8, 8), dilation=(4, 4), groups=960, bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(960, 240, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(240, 960, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer15): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(960, 960, kernel_size=(5, 5), stride=(1, 1), padding=(8, 8), dilation=(4, 4), groups=960, bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(960, 240, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(240, 960, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer16): ConvModule(
      (conv): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), dilation=(4, 4), bias=False)
      (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      (activate): Hardswish()
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://contrib/mobilenet_v3_large'}
  (decode_head): MultiDepthwiseSeparableASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CombinedCrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(128, 11, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): DepthwiseSeparableASPPModule(
      (0): ConvModule(
        (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=960, bias=False)
          (bn): SyncBatchNorm(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=960, bias=False)
          (bn): SyncBatchNorm(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=960, bias=False)
          (bn): SyncBatchNorm(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(640, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (global_average_pooling): AdaptiveAvgPool2d(output_size=(1, 1))
    (multi_label_classifier): Linear(in_features=960, out_features=10, bias=True)
    (c1_bottleneck): ConvModule(
      (conv): Conv2d(16, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): SyncBatchNorm(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (sep_bottleneck): Sequential(
      (0): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(176, 176, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=176, bias=False)
          (bn): SyncBatchNorm(176, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(176, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(128, 11, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(960, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2022-06-30 09:17:54,722 - mmseg - INFO - Loaded 4559 images
2022-06-30 09:17:55,579 - mmseg - INFO - Loaded 1955 images
2022-06-30 09:17:55,582 - mmseg - INFO - load checkpoint from local path: ./work_dirs/deeplabv3plus_mobilenet_multi_food103_80k/latest.pth
2022-06-30 09:17:56,082 - mmseg - INFO - resumed from epoch: 1, iter 4999
2022-06-30 09:17:56,084 - mmseg - INFO - Start running, host: hli5@manectric, work_dir: /nfs/nfs9/home/nobackup/hli5/FoodCV/work_dirs/deeplabv3plus_mobilenet_multi_food103_80k
2022-06-30 09:17:56,085 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-06-30 09:17:56,087 - mmseg - INFO - workflow: [('train', 1)], max: 80000 iters
2022-06-30 09:17:56,087 - mmseg - INFO - Checkpoints will be saved to /nfs/nfs9/home/nobackup/hli5/FoodCV/work_dirs/deeplabv3plus_mobilenet_multi_food103_80k by HardDiskBackend.
2022-06-30 09:19:23,010 - mmseg - INFO - Saving checkpoint at 5000 iterations
2022-06-30 09:19:23,643 - mmseg - INFO - Exp name: deeplabv3plus_mobilenet_multi_food103_80k.py
2022-06-30 09:19:23,643 - mmseg - INFO - Iter [5000/80000]	lr: 9.441e-03, eta: 906 days, 4:31:40, time: 10.439, data_time: 3.490, memory: 15901, decode.loss_ce_combined: 0.5043, decode.acc_seg: 86.9073, decode.bin_ce_loss: 0.1145, aux.loss_ce: 0.1684, aux.acc_seg: 85.1614, loss: 0.7872
2022-06-30 09:24:49,801 - mmseg - INFO - per class results:
2022-06-30 09:24:49,803 - mmseg - INFO - 
+--------------------+-------+-------+
|       Class        |  IoU  |  Acc  |
+--------------------+-------+-------+
|     Background     | 89.91 | 94.39 |
|        Meat        | 64.15 | 76.93 |
|     Nuts/seeds     |  0.0  |  0.0  |
|        Eggs        | 25.39 | 58.65 |
| Beans/lentils/peas |  9.01 |  9.7  |
|       Fruit        |  50.4 | 61.76 |
|       Grain        | 53.66 | 64.61 |
|     Vegetables     | 61.58 | 85.26 |
|       Dairy        | 35.28 | 46.07 |
|    Sauce/Spread    |  31.6 | 38.11 |
|     Soup/Drink     | 44.25 | 58.55 |
+--------------------+-------+-------+
2022-06-30 09:24:49,804 - mmseg - INFO - Summary:
2022-06-30 09:24:49,804 - mmseg - INFO - 
+-------+-------+------+
|  aAcc |  mIoU | mAcc |
+-------+-------+------+
| 83.69 | 42.29 | 54.0 |
+-------+-------+------+
2022-06-30 09:24:49,816 - mmseg - INFO - Exp name: deeplabv3plus_mobilenet_multi_food103_80k.py
2022-06-30 09:24:49,818 - mmseg - INFO - Iter(val) [489]	aAcc: 0.8369, mIoU: 0.4229, mAcc: 0.5400, IoU.Background: 0.8991, IoU.Meat: 0.6415, IoU.Nuts/seeds: 0.0000, IoU.Eggs: 0.2539, IoU.Beans/lentils/peas: 0.0901, IoU.Fruit: 0.5040, IoU.Grain: 0.5366, IoU.Vegetables: 0.6158, IoU.Dairy: 0.3528, IoU.Sauce/Spread: 0.3160, IoU.Soup/Drink: 0.4425, Acc.Background: 0.9439, Acc.Meat: 0.7693, Acc.Nuts/seeds: 0.0000, Acc.Eggs: 0.5865, Acc.Beans/lentils/peas: 0.0970, Acc.Fruit: 0.6176, Acc.Grain: 0.6461, Acc.Vegetables: 0.8526, Acc.Dairy: 0.4607, Acc.Sauce/Spread: 0.3811, Acc.Soup/Drink: 0.5855
2022-06-30 09:25:38,418 - mmseg - INFO - Iter [5100/80000]	lr: 9.430e-03, eta: 12 days, 4:14:47, time: 3.748, data_time: 3.272, memory: 19740, decode.loss_ce_combined: 0.7307, decode.acc_seg: 79.9121, decode.bin_ce_loss: 0.1909, aux.loss_ce: 0.2362, aux.acc_seg: 77.9914, loss: 1.1577
2022-06-30 09:26:26,868 - mmseg - INFO - Iter [5200/80000]	lr: 9.419e-03, eta: 6 days, 7:39:45, time: 0.484, data_time: 0.011, memory: 19740, decode.loss_ce_combined: 0.7722, decode.acc_seg: 79.4517, decode.bin_ce_loss: 0.2099, aux.loss_ce: 0.2429, aux.acc_seg: 77.8522, loss: 1.2250
2022-06-30 09:27:20,139 - mmseg - INFO - Iter [5300/80000]	lr: 9.408e-03, eta: 4 days, 8:48:45, time: 0.533, data_time: 0.041, memory: 19740, decode.loss_ce_combined: 0.7478, decode.acc_seg: 79.6715, decode.bin_ce_loss: 0.1998, aux.loss_ce: 0.2388, aux.acc_seg: 78.0187, loss: 1.1864
2022-06-30 09:28:09,921 - mmseg - INFO - Iter [5400/80000]	lr: 9.397e-03, eta: 3 days, 9:08:32, time: 0.498, data_time: 0.012, memory: 19740, decode.loss_ce_combined: 0.7386, decode.acc_seg: 80.1178, decode.bin_ce_loss: 0.2006, aux.loss_ce: 0.2340, aux.acc_seg: 78.4993, loss: 1.1733
2022-06-30 09:28:58,936 - mmseg - INFO - Iter [5500/80000]	lr: 9.385e-03, eta: 2 days, 18:53:01, time: 0.490, data_time: 0.011, memory: 19740, decode.loss_ce_combined: 0.7612, decode.acc_seg: 79.4212, decode.bin_ce_loss: 0.2030, aux.loss_ce: 0.2409, aux.acc_seg: 77.7730, loss: 1.2051
2022-06-30 09:29:51,969 - mmseg - INFO - Iter [5600/80000]	lr: 9.374e-03, eta: 2 days, 9:30:13, time: 0.530, data_time: 0.054, memory: 19740, decode.loss_ce_combined: 0.7620, decode.acc_seg: 78.8709, decode.bin_ce_loss: 0.1991, aux.loss_ce: 0.2423, aux.acc_seg: 77.6069, loss: 1.2034
2022-06-30 09:30:41,440 - mmseg - INFO - Iter [5700/80000]	lr: 9.363e-03, eta: 2 days, 2:41:27, time: 0.495, data_time: 0.011, memory: 19740, decode.loss_ce_combined: 0.7363, decode.acc_seg: 79.4746, decode.bin_ce_loss: 0.1936, aux.loss_ce: 0.2396, aux.acc_seg: 77.8292, loss: 1.1695
2022-06-30 09:31:30,947 - mmseg - INFO - Iter [5800/80000]	lr: 9.352e-03, eta: 1 day, 21:34:35, time: 0.495, data_time: 0.011, memory: 19740, decode.loss_ce_combined: 0.7449, decode.acc_seg: 79.7593, decode.bin_ce_loss: 0.2059, aux.loss_ce: 0.2363, aux.acc_seg: 77.9605, loss: 1.1872
