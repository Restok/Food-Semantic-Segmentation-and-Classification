{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA TITAN V\nGPU 1: Quadro P6000\nGPU 2,3: NVIDIA TITAN X (Pascal)\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.0\nOpenCV: 4.6.0\nMMCV: 1.5.3\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.7\nMMSegmentation: 0.25.0+cc436a5", "seed": 895301077, "exp_name": "deeplabv3plus_mobilenet_multi_food103_80k.py", "mmseg_version": "0.25.0+cc436a5", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='MultiEncoderDecoder',\n    pretrained='open-mmlab://contrib/mobilenet_v3_large',\n    backbone=dict(\n        type='MobileNetV3',\n        arch='large',\n        out_indices=(1, 3, 16),\n        norm_cfg=dict(type='SyncBN', eps=0.001, requires_grad=True),\n        pretrained='open-mmlab://contrib/mobilenet_v3_large'),\n    decode_head=dict(\n        type='MultiDepthwiseSeparableASPPHead',\n        in_channels=960,\n        in_index=2,\n        channels=128,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=16,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='CombinedCrossEntropyLoss', loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=960,\n        in_index=2,\n        channels=128,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'ADE20KDataset'\ndata_root = './FoodSeg103/Images'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=12,\n    train=dict(\n        type='ADE20KDataset',\n        data_root='./FoodSeg103/Images',\n        img_dir='img_dir_edited/train',\n        ann_dir='ann_dir_edited/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='ADE20KDataset',\n        data_root='./FoodSeg103/Images',\n        img_dir='img_dir_edited/test',\n        ann_dir='ann_dir_edited/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ADE20KDataset',\n        data_root='./FoodSeg103/Images',\n        img_dir='img_dir_edited/test',\n        ann_dir='ann_dir_edited/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=5000, save_optimizer=True)\nevaluation = dict(interval=5000, metric='mIoU', pre_eval=True)\nseed = 895301077\nwork_dir = './work_dirs/deeplabv3plus_mobilenet_multi_food103_80k'\ngpu_ids = range(0, 4)\nauto_resume = False\ndevice = 'cuda'\n", "CLASSES": ["Background", "Meat", "Nuts/seeds", "Eggs", "Beans/lentils/peas", "Fruit", "Grain", "Vegetables", "Dairy", "Sauce/Spread", "Soup/Drink"], "PALETTE": null}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00999, "memory": 15880, "data_time": 0.02367, "decode.loss_ce_combined": 1.88826, "decode.acc_seg": 41.46597, "decode.bin_ce_loss": 0.3821, "aux.loss_ce": 0.62219, "aux.acc_seg": 41.45358, "loss": 2.89255, "time": 0.80841}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00998, "memory": 15880, "data_time": 0.0126, "decode.loss_ce_combined": 1.51022, "decode.acc_seg": 57.19403, "decode.bin_ce_loss": 0.34885, "aux.loss_ce": 0.47876, "aux.acc_seg": 55.9042, "loss": 2.33784, "time": 0.67513}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00997, "memory": 15880, "data_time": 0.06577, "decode.loss_ce_combined": 1.3677, "decode.acc_seg": 62.37983, "decode.bin_ce_loss": 0.32696, "aux.loss_ce": 0.43409, "aux.acc_seg": 60.50756, "loss": 2.12876, "time": 0.67915}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00996, "memory": 15880, "data_time": 0.01136, "decode.loss_ce_combined": 1.2761, "decode.acc_seg": 64.88998, "decode.bin_ce_loss": 0.31049, "aux.loss_ce": 0.40666, "aux.acc_seg": 63.23557, "loss": 1.99325, "time": 0.66869}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00994, "memory": 15880, "data_time": 0.01122, "decode.loss_ce_combined": 1.24767, "decode.acc_seg": 66.17661, "decode.bin_ce_loss": 0.31414, "aux.loss_ce": 0.39577, "aux.acc_seg": 63.9232, "loss": 1.95758, "time": 0.69282}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.00993, "memory": 15880, "data_time": 0.06383, "decode.loss_ce_combined": 1.17185, "decode.acc_seg": 67.90498, "decode.bin_ce_loss": 0.29334, "aux.loss_ce": 0.37661, "aux.acc_seg": 65.19896, "loss": 1.8418, "time": 0.71254}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.00992, "memory": 15880, "data_time": 0.01217, "decode.loss_ce_combined": 1.16756, "decode.acc_seg": 68.67798, "decode.bin_ce_loss": 0.29661, "aux.loss_ce": 0.37291, "aux.acc_seg": 66.18366, "loss": 1.83707, "time": 0.70474}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.00991, "memory": 15880, "data_time": 0.012, "decode.loss_ce_combined": 1.12416, "decode.acc_seg": 69.45887, "decode.bin_ce_loss": 0.29003, "aux.loss_ce": 0.35604, "aux.acc_seg": 67.34334, "loss": 1.77023, "time": 0.68856}
{"mode": "train", "epoch": 4, "iter": 900, "lr": 0.0099, "memory": 15880, "data_time": 0.03808, "decode.loss_ce_combined": 1.10601, "decode.acc_seg": 70.18478, "decode.bin_ce_loss": 0.2834, "aux.loss_ce": 0.35089, "aux.acc_seg": 68.08759, "loss": 1.74029, "time": 0.70346}
{"mode": "train", "epoch": 4, "iter": 1000, "lr": 0.00989, "memory": 15880, "data_time": 0.01161, "decode.loss_ce_combined": 1.06856, "decode.acc_seg": 71.20074, "decode.bin_ce_loss": 0.27093, "aux.loss_ce": 0.34342, "aux.acc_seg": 68.72246, "loss": 1.68291, "time": 0.69327}
{"mode": "train", "epoch": 4, "iter": 1100, "lr": 0.00988, "memory": 15880, "data_time": 0.01254, "decode.loss_ce_combined": 1.03631, "decode.acc_seg": 72.45289, "decode.bin_ce_loss": 0.27607, "aux.loss_ce": 0.32449, "aux.acc_seg": 70.26482, "loss": 1.63686, "time": 0.69128}
{"mode": "train", "epoch": 5, "iter": 1200, "lr": 0.00987, "memory": 15880, "data_time": 0.04104, "decode.loss_ce_combined": 1.03851, "decode.acc_seg": 72.12821, "decode.bin_ce_loss": 0.27546, "aux.loss_ce": 0.32433, "aux.acc_seg": 70.28427, "loss": 1.6383, "time": 0.70332}
{"mode": "train", "epoch": 5, "iter": 1300, "lr": 0.00986, "memory": 15880, "data_time": 0.01051, "decode.loss_ce_combined": 0.99144, "decode.acc_seg": 73.68204, "decode.bin_ce_loss": 0.26496, "aux.loss_ce": 0.31248, "aux.acc_seg": 71.3244, "loss": 1.56888, "time": 0.71694}
{"mode": "train", "epoch": 5, "iter": 1400, "lr": 0.00984, "memory": 15880, "data_time": 0.01179, "decode.loss_ce_combined": 0.9944, "decode.acc_seg": 73.24342, "decode.bin_ce_loss": 0.26374, "aux.loss_ce": 0.31557, "aux.acc_seg": 71.25818, "loss": 1.57372, "time": 0.69901}
{"mode": "train", "epoch": 6, "iter": 1500, "lr": 0.00983, "memory": 15880, "data_time": 0.06617, "decode.loss_ce_combined": 0.9544, "decode.acc_seg": 74.27936, "decode.bin_ce_loss": 0.25072, "aux.loss_ce": 0.29998, "aux.acc_seg": 72.38801, "loss": 1.5051, "time": 0.70544}
{"mode": "train", "epoch": 6, "iter": 1600, "lr": 0.00982, "memory": 15880, "data_time": 0.01062, "decode.loss_ce_combined": 0.98996, "decode.acc_seg": 73.82058, "decode.bin_ce_loss": 0.26768, "aux.loss_ce": 0.30996, "aux.acc_seg": 71.88696, "loss": 1.56761, "time": 0.6898}
{"mode": "train", "epoch": 6, "iter": 1700, "lr": 0.00981, "memory": 15880, "data_time": 0.01167, "decode.loss_ce_combined": 0.96794, "decode.acc_seg": 73.87016, "decode.bin_ce_loss": 0.25504, "aux.loss_ce": 0.30219, "aux.acc_seg": 72.08898, "loss": 1.52516, "time": 0.66406}
{"mode": "train", "epoch": 7, "iter": 1800, "lr": 0.0098, "memory": 15880, "data_time": 0.04724, "decode.loss_ce_combined": 0.93473, "decode.acc_seg": 74.68756, "decode.bin_ce_loss": 0.24414, "aux.loss_ce": 0.29562, "aux.acc_seg": 73.07519, "loss": 1.47449, "time": 0.73156}
{"mode": "train", "epoch": 7, "iter": 1900, "lr": 0.00979, "memory": 15880, "data_time": 0.01117, "decode.loss_ce_combined": 0.93158, "decode.acc_seg": 75.23304, "decode.bin_ce_loss": 0.24734, "aux.loss_ce": 0.29325, "aux.acc_seg": 73.34918, "loss": 1.47217, "time": 0.70423}
{"mode": "train", "epoch": 8, "iter": 2000, "lr": 0.00978, "memory": 15880, "data_time": 0.0507, "decode.loss_ce_combined": 0.96351, "decode.acc_seg": 74.07451, "decode.bin_ce_loss": 0.25849, "aux.loss_ce": 0.30168, "aux.acc_seg": 72.36103, "loss": 1.52369, "time": 0.69887}
{"mode": "train", "epoch": 8, "iter": 2100, "lr": 0.00977, "memory": 15880, "data_time": 0.00967, "decode.loss_ce_combined": 0.90315, "decode.acc_seg": 76.0705, "decode.bin_ce_loss": 0.24083, "aux.loss_ce": 0.28404, "aux.acc_seg": 74.2218, "loss": 1.42802, "time": 0.70715}
{"mode": "train", "epoch": 8, "iter": 2200, "lr": 0.00975, "memory": 15880, "data_time": 0.01175, "decode.loss_ce_combined": 0.89345, "decode.acc_seg": 75.84472, "decode.bin_ce_loss": 0.23744, "aux.loss_ce": 0.28197, "aux.acc_seg": 74.19569, "loss": 1.41286, "time": 0.68811}
{"mode": "train", "epoch": 9, "iter": 2300, "lr": 0.00974, "memory": 15880, "data_time": 0.0473, "decode.loss_ce_combined": 0.90263, "decode.acc_seg": 75.74086, "decode.bin_ce_loss": 0.23933, "aux.loss_ce": 0.28356, "aux.acc_seg": 74.10617, "loss": 1.42551, "time": 0.7236}
{"mode": "train", "epoch": 9, "iter": 2400, "lr": 0.00973, "memory": 15880, "data_time": 0.01228, "decode.loss_ce_combined": 0.88876, "decode.acc_seg": 76.38273, "decode.bin_ce_loss": 0.23727, "aux.loss_ce": 0.27734, "aux.acc_seg": 74.92277, "loss": 1.40336, "time": 0.69183}
{"mode": "train", "epoch": 9, "iter": 2500, "lr": 0.00972, "memory": 15880, "data_time": 0.01178, "decode.loss_ce_combined": 0.89181, "decode.acc_seg": 76.0463, "decode.bin_ce_loss": 0.23864, "aux.loss_ce": 0.28026, "aux.acc_seg": 74.49358, "loss": 1.41071, "time": 0.69229}
{"mode": "train", "epoch": 10, "iter": 2600, "lr": 0.00971, "memory": 15880, "data_time": 0.04493, "decode.loss_ce_combined": 0.87109, "decode.acc_seg": 76.34444, "decode.bin_ce_loss": 0.23093, "aux.loss_ce": 0.27552, "aux.acc_seg": 74.85653, "loss": 1.37754, "time": 0.69531}
{"mode": "train", "epoch": 10, "iter": 2700, "lr": 0.0097, "memory": 15880, "data_time": 0.01061, "decode.loss_ce_combined": 0.85748, "decode.acc_seg": 76.94469, "decode.bin_ce_loss": 0.22451, "aux.loss_ce": 0.27306, "aux.acc_seg": 75.28809, "loss": 1.35505, "time": 0.69866}
{"mode": "train", "epoch": 10, "iter": 2800, "lr": 0.00969, "memory": 15880, "data_time": 0.01161, "decode.loss_ce_combined": 0.86129, "decode.acc_seg": 76.83338, "decode.bin_ce_loss": 0.23401, "aux.loss_ce": 0.26988, "aux.acc_seg": 75.32195, "loss": 1.36518, "time": 0.70094}
{"mode": "train", "epoch": 11, "iter": 2900, "lr": 0.00968, "memory": 15880, "data_time": 0.04455, "decode.loss_ce_combined": 0.85192, "decode.acc_seg": 77.26389, "decode.bin_ce_loss": 0.2329, "aux.loss_ce": 0.26694, "aux.acc_seg": 75.65256, "loss": 1.35176, "time": 0.71339}
{"mode": "train", "epoch": 11, "iter": 3000, "lr": 0.00967, "memory": 15880, "data_time": 0.01152, "decode.loss_ce_combined": 0.89393, "decode.acc_seg": 76.05408, "decode.bin_ce_loss": 0.23502, "aux.loss_ce": 0.28012, "aux.acc_seg": 74.72133, "loss": 1.40907, "time": 0.70592}
{"mode": "train", "epoch": 11, "iter": 3100, "lr": 0.00965, "memory": 15880, "data_time": 0.01113, "decode.loss_ce_combined": 0.83042, "decode.acc_seg": 77.84376, "decode.bin_ce_loss": 0.22283, "aux.loss_ce": 0.26033, "aux.acc_seg": 76.22457, "loss": 1.31359, "time": 0.72037}
{"mode": "train", "epoch": 12, "iter": 3200, "lr": 0.00964, "memory": 15880, "data_time": 0.06037, "decode.loss_ce_combined": 0.82444, "decode.acc_seg": 77.62816, "decode.bin_ce_loss": 0.21756, "aux.loss_ce": 0.26156, "aux.acc_seg": 75.93141, "loss": 1.30356, "time": 0.71353}
{"mode": "train", "epoch": 12, "iter": 3300, "lr": 0.00963, "memory": 15880, "data_time": 0.01238, "decode.loss_ce_combined": 0.83962, "decode.acc_seg": 77.26501, "decode.bin_ce_loss": 0.22222, "aux.loss_ce": 0.26548, "aux.acc_seg": 75.64743, "loss": 1.32732, "time": 0.6903}
{"mode": "train", "epoch": 12, "iter": 3400, "lr": 0.00962, "memory": 15880, "data_time": 0.01137, "decode.loss_ce_combined": 0.8364, "decode.acc_seg": 77.52695, "decode.bin_ce_loss": 0.22357, "aux.loss_ce": 0.26313, "aux.acc_seg": 75.91744, "loss": 1.3231, "time": 0.67687}
{"mode": "train", "epoch": 13, "iter": 3500, "lr": 0.00961, "memory": 15880, "data_time": 0.04227, "decode.loss_ce_combined": 0.79485, "decode.acc_seg": 78.59046, "decode.bin_ce_loss": 0.21165, "aux.loss_ce": 0.25218, "aux.acc_seg": 77.09877, "loss": 1.25869, "time": 0.70246}
{"mode": "train", "epoch": 13, "iter": 3600, "lr": 0.0096, "memory": 15880, "data_time": 0.01144, "decode.loss_ce_combined": 0.82637, "decode.acc_seg": 77.82469, "decode.bin_ce_loss": 0.2201, "aux.loss_ce": 0.25855, "aux.acc_seg": 76.45059, "loss": 1.30503, "time": 0.69393}
{"mode": "train", "epoch": 13, "iter": 3700, "lr": 0.00959, "memory": 15880, "data_time": 0.01176, "decode.loss_ce_combined": 0.83044, "decode.acc_seg": 77.36048, "decode.bin_ce_loss": 0.22165, "aux.loss_ce": 0.26265, "aux.acc_seg": 75.87427, "loss": 1.31474, "time": 0.67094}
{"mode": "train", "epoch": 14, "iter": 3800, "lr": 0.00958, "memory": 15880, "data_time": 0.06235, "decode.loss_ce_combined": 0.80413, "decode.acc_seg": 78.72531, "decode.bin_ce_loss": 0.20756, "aux.loss_ce": 0.25958, "aux.acc_seg": 76.91251, "loss": 1.27127, "time": 0.7389}
{"mode": "train", "epoch": 14, "iter": 3900, "lr": 0.00956, "memory": 15880, "data_time": 0.01096, "decode.loss_ce_combined": 0.80323, "decode.acc_seg": 78.21348, "decode.bin_ce_loss": 0.21472, "aux.loss_ce": 0.25482, "aux.acc_seg": 76.39212, "loss": 1.27277, "time": 0.68568}
{"mode": "train", "epoch": 15, "iter": 4000, "lr": 0.00955, "memory": 15880, "data_time": 0.04365, "decode.loss_ce_combined": 0.81308, "decode.acc_seg": 77.83978, "decode.bin_ce_loss": 0.21567, "aux.loss_ce": 0.25629, "aux.acc_seg": 76.40595, "loss": 1.28504, "time": 0.69896}
{"mode": "train", "epoch": 15, "iter": 4100, "lr": 0.00954, "memory": 15880, "data_time": 0.01041, "decode.loss_ce_combined": 0.78242, "decode.acc_seg": 78.70621, "decode.bin_ce_loss": 0.20395, "aux.loss_ce": 0.252, "aux.acc_seg": 76.73284, "loss": 1.23837, "time": 0.68303}
{"mode": "train", "epoch": 15, "iter": 4200, "lr": 0.00953, "memory": 15880, "data_time": 0.01166, "decode.loss_ce_combined": 0.79752, "decode.acc_seg": 78.16485, "decode.bin_ce_loss": 0.20695, "aux.loss_ce": 0.254, "aux.acc_seg": 76.69073, "loss": 1.25847, "time": 0.70052}
{"mode": "train", "epoch": 16, "iter": 4300, "lr": 0.00952, "memory": 15880, "data_time": 0.04411, "decode.loss_ce_combined": 0.77198, "decode.acc_seg": 79.26069, "decode.bin_ce_loss": 0.21262, "aux.loss_ce": 0.24318, "aux.acc_seg": 77.6023, "loss": 1.22778, "time": 0.71507}
{"mode": "train", "epoch": 16, "iter": 4400, "lr": 0.00951, "memory": 15880, "data_time": 0.01088, "decode.loss_ce_combined": 0.762, "decode.acc_seg": 79.32158, "decode.bin_ce_loss": 0.20686, "aux.loss_ce": 0.24304, "aux.acc_seg": 77.56334, "loss": 1.2119, "time": 0.69776}
{"mode": "train", "epoch": 16, "iter": 4500, "lr": 0.0095, "memory": 15880, "data_time": 0.01135, "decode.loss_ce_combined": 0.79328, "decode.acc_seg": 78.46651, "decode.bin_ce_loss": 0.2137, "aux.loss_ce": 0.25176, "aux.acc_seg": 76.85653, "loss": 1.25873, "time": 0.69778}
{"mode": "train", "epoch": 17, "iter": 4600, "lr": 0.00949, "memory": 15880, "data_time": 0.05173, "decode.loss_ce_combined": 0.77182, "decode.acc_seg": 78.83697, "decode.bin_ce_loss": 0.20535, "aux.loss_ce": 0.24558, "aux.acc_seg": 77.31973, "loss": 1.22275, "time": 0.70671}
{"mode": "train", "epoch": 17, "iter": 4700, "lr": 0.00948, "memory": 15880, "data_time": 0.0123, "decode.loss_ce_combined": 0.76276, "decode.acc_seg": 79.31144, "decode.bin_ce_loss": 0.20183, "aux.loss_ce": 0.24537, "aux.acc_seg": 77.44105, "loss": 1.20997, "time": 0.69527}
{"mode": "train", "epoch": 17, "iter": 4800, "lr": 0.00946, "memory": 15880, "data_time": 0.01166, "decode.loss_ce_combined": 0.78894, "decode.acc_seg": 78.23868, "decode.bin_ce_loss": 0.20517, "aux.loss_ce": 0.25124, "aux.acc_seg": 76.73228, "loss": 1.24535, "time": 0.68968}
{"mode": "train", "epoch": 18, "iter": 4900, "lr": 0.00945, "memory": 15880, "data_time": 0.03942, "decode.loss_ce_combined": 0.73911, "decode.acc_seg": 80.11979, "decode.bin_ce_loss": 0.19946, "aux.loss_ce": 0.23583, "aux.acc_seg": 78.71007, "loss": 1.1744, "time": 0.69954}
{"mode": "train", "epoch": 18, "iter": 5000, "lr": 0.00944, "memory": 15880, "data_time": 0.01208, "decode.loss_ce_combined": 0.78289, "decode.acc_seg": 78.78692, "decode.bin_ce_loss": 0.21298, "aux.loss_ce": 0.24578, "aux.acc_seg": 77.24104, "loss": 1.24166, "time": 0.70169}
