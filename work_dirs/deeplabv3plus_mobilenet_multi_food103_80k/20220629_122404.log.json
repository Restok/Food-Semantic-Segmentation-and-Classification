{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA TITAN V\nGPU 1: Quadro P6000\nGPU 2,3: NVIDIA TITAN X (Pascal)\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.7, V11.7.64\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.8.0+cu101\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu101\nOpenCV: 4.6.0\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.25.0+cc436a5", "seed": 982101372, "exp_name": "deeplabv3plus_mobilenet_multi_food103_80k.py", "mmseg_version": "0.25.0+cc436a5", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='MultiEncoderDecoder',\n    pretrained='open-mmlab://contrib/mobilenet_v3_large',\n    backbone=dict(\n        type='MobileNetV3',\n        arch='large',\n        out_indices=(1, 3, 16),\n        norm_cfg=dict(type='SyncBN', eps=0.001, requires_grad=True),\n        pretrained='open-mmlab://contrib/mobilenet_v3_large'),\n    decode_head=dict(\n        type='MultiDepthwiseSeparableASPPHead',\n        in_channels=960,\n        in_index=2,\n        channels=128,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=16,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(type='CombinedCrossEntropyLoss', loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=960,\n        in_index=2,\n        channels=128,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=11,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'ADE20KDataset'\ndata_root = './FoodSeg103/Images'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=False),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=12,\n    train=dict(\n        type='ADE20KDataset',\n        data_root='./FoodSeg103/Images',\n        img_dir='img_dir_edited/train',\n        ann_dir='ann_dir_edited/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=False),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='ADE20KDataset',\n        data_root='./FoodSeg103/Images',\n        img_dir='img_dir_edited/test',\n        ann_dir='ann_dir_edited/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ADE20KDataset',\n        data_root='./FoodSeg103/Images',\n        img_dir='img_dir_edited/test',\n        ann_dir='ann_dir_edited/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=5000, save_optimizer=True)\nevaluation = dict(interval=5000, metric='mIoU', pre_eval=True)\nseed = 982101372\nwork_dir = './work_dirs/deeplabv3plus_mobilenet_multi_food103_80k'\ngpu_ids = range(0, 4)\nauto_resume = False\ndevice = 'cuda'\n", "CLASSES": ["Background", "Meat", "Nuts/seeds", "Eggs", "Beans/lentils/peas", "Fruit", "Grain", "Vegetables", "Dairy", "Sauce/Spread", "Soup/Drink"], "PALETTE": null}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00999, "memory": 15883, "data_time": 0.02161, "decode.loss_ce_combined": 1.89267, "decode.acc_seg": 42.34373, "decode.bin_ce_loss": 0.38946, "aux.loss_ce": 0.62698, "aux.acc_seg": 40.6548, "loss": 2.90911, "time": 0.68735}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00998, "memory": 15883, "data_time": 0.01228, "decode.loss_ce_combined": 1.47473, "decode.acc_seg": 58.87842, "decode.bin_ce_loss": 0.34416, "aux.loss_ce": 0.46771, "aux.acc_seg": 58.03994, "loss": 2.2866, "time": 0.64044}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00997, "memory": 15883, "data_time": 0.05275, "decode.loss_ce_combined": 1.36125, "decode.acc_seg": 61.39348, "decode.bin_ce_loss": 0.32684, "aux.loss_ce": 0.42798, "aux.acc_seg": 60.52269, "loss": 2.11607, "time": 0.65908}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00996, "memory": 15883, "data_time": 0.01182, "decode.loss_ce_combined": 1.27746, "decode.acc_seg": 64.63666, "decode.bin_ce_loss": 0.31443, "aux.loss_ce": 0.40188, "aux.acc_seg": 63.44536, "loss": 1.99377, "time": 0.66512}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00994, "memory": 15883, "data_time": 0.01184, "decode.loss_ce_combined": 1.21306, "decode.acc_seg": 67.01063, "decode.bin_ce_loss": 0.30124, "aux.loss_ce": 0.38502, "aux.acc_seg": 64.91999, "loss": 1.89932, "time": 0.67856}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.00993, "memory": 15883, "data_time": 0.04391, "decode.loss_ce_combined": 1.20197, "decode.acc_seg": 67.59098, "decode.bin_ce_loss": 0.29847, "aux.loss_ce": 0.38604, "aux.acc_seg": 65.01645, "loss": 1.88648, "time": 0.67396}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.00992, "memory": 15883, "data_time": 0.0114, "decode.loss_ce_combined": 1.14978, "decode.acc_seg": 68.95777, "decode.bin_ce_loss": 0.28843, "aux.loss_ce": 0.36798, "aux.acc_seg": 66.42324, "loss": 1.80619, "time": 0.65943}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.00991, "memory": 15883, "data_time": 0.01202, "decode.loss_ce_combined": 1.09592, "decode.acc_seg": 70.13692, "decode.bin_ce_loss": 0.28622, "aux.loss_ce": 0.34145, "aux.acc_seg": 68.40337, "loss": 1.72359, "time": 0.6534}
{"mode": "train", "epoch": 4, "iter": 900, "lr": 0.0099, "memory": 15883, "data_time": 0.04968, "decode.loss_ce_combined": 1.04916, "decode.acc_seg": 71.57894, "decode.bin_ce_loss": 0.27642, "aux.loss_ce": 0.33218, "aux.acc_seg": 69.48372, "loss": 1.65776, "time": 0.67706}
{"mode": "train", "epoch": 4, "iter": 1000, "lr": 0.00989, "memory": 15883, "data_time": 0.011, "decode.loss_ce_combined": 1.06034, "decode.acc_seg": 71.38578, "decode.bin_ce_loss": 0.26974, "aux.loss_ce": 0.33776, "aux.acc_seg": 69.37496, "loss": 1.66784, "time": 0.65978}
{"mode": "train", "epoch": 4, "iter": 1100, "lr": 0.00988, "memory": 15883, "data_time": 0.01168, "decode.loss_ce_combined": 1.07786, "decode.acc_seg": 71.40885, "decode.bin_ce_loss": 0.27811, "aux.loss_ce": 0.34, "aux.acc_seg": 69.41495, "loss": 1.69597, "time": 0.65875}
{"mode": "train", "epoch": 5, "iter": 1200, "lr": 0.00987, "memory": 15883, "data_time": 0.05829, "decode.loss_ce_combined": 1.01262, "decode.acc_seg": 72.8563, "decode.bin_ce_loss": 0.2635, "aux.loss_ce": 0.32155, "aux.acc_seg": 70.9278, "loss": 1.59766, "time": 0.68245}
{"mode": "train", "epoch": 5, "iter": 1300, "lr": 0.00986, "memory": 15883, "data_time": 0.01144, "decode.loss_ce_combined": 0.99383, "decode.acc_seg": 73.42468, "decode.bin_ce_loss": 0.26252, "aux.loss_ce": 0.31064, "aux.acc_seg": 71.52315, "loss": 1.567, "time": 0.67649}
{"mode": "train", "epoch": 5, "iter": 1400, "lr": 0.00984, "memory": 15883, "data_time": 0.01046, "decode.loss_ce_combined": 1.01028, "decode.acc_seg": 72.63059, "decode.bin_ce_loss": 0.26796, "aux.loss_ce": 0.31575, "aux.acc_seg": 70.86001, "loss": 1.594, "time": 0.67189}
{"mode": "train", "epoch": 6, "iter": 1500, "lr": 0.00983, "memory": 15883, "data_time": 0.06303, "decode.loss_ce_combined": 1.00869, "decode.acc_seg": 72.9848, "decode.bin_ce_loss": 0.25807, "aux.loss_ce": 0.31891, "aux.acc_seg": 71.16031, "loss": 1.58567, "time": 0.66578}
{"mode": "train", "epoch": 6, "iter": 1600, "lr": 0.00982, "memory": 15883, "data_time": 0.01039, "decode.loss_ce_combined": 0.96019, "decode.acc_seg": 74.3555, "decode.bin_ce_loss": 0.25371, "aux.loss_ce": 0.30014, "aux.acc_seg": 72.75138, "loss": 1.51404, "time": 0.65859}
{"mode": "train", "epoch": 6, "iter": 1700, "lr": 0.00981, "memory": 15883, "data_time": 0.01161, "decode.loss_ce_combined": 0.97017, "decode.acc_seg": 73.93483, "decode.bin_ce_loss": 0.26716, "aux.loss_ce": 0.30023, "aux.acc_seg": 72.2893, "loss": 1.53755, "time": 0.62743}
{"mode": "train", "epoch": 7, "iter": 1800, "lr": 0.0098, "memory": 15883, "data_time": 0.04621, "decode.loss_ce_combined": 0.9213, "decode.acc_seg": 74.9865, "decode.bin_ce_loss": 0.24063, "aux.loss_ce": 0.29201, "aux.acc_seg": 73.28785, "loss": 1.45394, "time": 0.68172}
{"mode": "train", "epoch": 7, "iter": 1900, "lr": 0.00979, "memory": 15883, "data_time": 0.01083, "decode.loss_ce_combined": 0.91858, "decode.acc_seg": 75.2612, "decode.bin_ce_loss": 0.24645, "aux.loss_ce": 0.28451, "aux.acc_seg": 74.01295, "loss": 1.44954, "time": 0.67145}
{"mode": "train", "epoch": 8, "iter": 2000, "lr": 0.00978, "memory": 15883, "data_time": 0.07115, "decode.loss_ce_combined": 0.95526, "decode.acc_seg": 74.449, "decode.bin_ce_loss": 0.25487, "aux.loss_ce": 0.29507, "aux.acc_seg": 72.97653, "loss": 1.5052, "time": 0.68124}
{"mode": "train", "epoch": 8, "iter": 2100, "lr": 0.00977, "memory": 15883, "data_time": 0.01103, "decode.loss_ce_combined": 0.89049, "decode.acc_seg": 75.91962, "decode.bin_ce_loss": 0.23427, "aux.loss_ce": 0.28239, "aux.acc_seg": 74.08779, "loss": 1.40714, "time": 0.65624}
{"mode": "train", "epoch": 8, "iter": 2200, "lr": 0.00975, "memory": 15883, "data_time": 0.01213, "decode.loss_ce_combined": 0.89849, "decode.acc_seg": 75.86505, "decode.bin_ce_loss": 0.24155, "aux.loss_ce": 0.28303, "aux.acc_seg": 74.01573, "loss": 1.42307, "time": 0.67477}
{"mode": "train", "epoch": 9, "iter": 2300, "lr": 0.00974, "memory": 15883, "data_time": 0.0616, "decode.loss_ce_combined": 0.89628, "decode.acc_seg": 75.78021, "decode.bin_ce_loss": 0.24307, "aux.loss_ce": 0.27617, "aux.acc_seg": 74.50834, "loss": 1.41552, "time": 0.68021}
{"mode": "train", "epoch": 9, "iter": 2400, "lr": 0.00973, "memory": 15883, "data_time": 0.0115, "decode.loss_ce_combined": 0.88844, "decode.acc_seg": 76.04593, "decode.bin_ce_loss": 0.23594, "aux.loss_ce": 0.27711, "aux.acc_seg": 74.74666, "loss": 1.40148, "time": 0.67069}
{"mode": "train", "epoch": 9, "iter": 2500, "lr": 0.00972, "memory": 15883, "data_time": 0.01118, "decode.loss_ce_combined": 0.91309, "decode.acc_seg": 75.15158, "decode.bin_ce_loss": 0.23867, "aux.loss_ce": 0.28527, "aux.acc_seg": 73.8496, "loss": 1.43704, "time": 0.65852}
{"mode": "train", "epoch": 10, "iter": 2600, "lr": 0.00971, "memory": 15883, "data_time": 0.03443, "decode.loss_ce_combined": 0.8577, "decode.acc_seg": 76.74094, "decode.bin_ce_loss": 0.2313, "aux.loss_ce": 0.27103, "aux.acc_seg": 75.09171, "loss": 1.36002, "time": 0.68331}
{"mode": "train", "epoch": 10, "iter": 2700, "lr": 0.0097, "memory": 15883, "data_time": 0.011, "decode.loss_ce_combined": 0.85479, "decode.acc_seg": 76.79652, "decode.bin_ce_loss": 0.22513, "aux.loss_ce": 0.27003, "aux.acc_seg": 75.44146, "loss": 1.34995, "time": 0.67761}
{"mode": "train", "epoch": 10, "iter": 2800, "lr": 0.00969, "memory": 15883, "data_time": 0.01223, "decode.loss_ce_combined": 0.85291, "decode.acc_seg": 77.02074, "decode.bin_ce_loss": 0.22808, "aux.loss_ce": 0.26744, "aux.acc_seg": 75.29038, "loss": 1.34843, "time": 0.65484}
{"mode": "train", "epoch": 11, "iter": 2900, "lr": 0.00968, "memory": 15883, "data_time": 0.03955, "decode.loss_ce_combined": 0.87191, "decode.acc_seg": 76.6545, "decode.bin_ce_loss": 0.23623, "aux.loss_ce": 0.27279, "aux.acc_seg": 75.07146, "loss": 1.38093, "time": 0.66642}
{"mode": "train", "epoch": 11, "iter": 3000, "lr": 0.00967, "memory": 15883, "data_time": 0.01189, "decode.loss_ce_combined": 0.84422, "decode.acc_seg": 77.14718, "decode.bin_ce_loss": 0.22744, "aux.loss_ce": 0.26453, "aux.acc_seg": 75.46364, "loss": 1.33619, "time": 0.66159}
{"mode": "train", "epoch": 11, "iter": 3100, "lr": 0.00965, "memory": 15883, "data_time": 0.01071, "decode.loss_ce_combined": 0.88934, "decode.acc_seg": 75.84014, "decode.bin_ce_loss": 0.23781, "aux.loss_ce": 0.27785, "aux.acc_seg": 74.38006, "loss": 1.405, "time": 0.66803}
{"mode": "train", "epoch": 12, "iter": 3200, "lr": 0.00964, "memory": 15883, "data_time": 0.04394, "decode.loss_ce_combined": 0.8195, "decode.acc_seg": 77.50707, "decode.bin_ce_loss": 0.21683, "aux.loss_ce": 0.25992, "aux.acc_seg": 76.05581, "loss": 1.29625, "time": 0.67824}
{"mode": "train", "epoch": 12, "iter": 3300, "lr": 0.00963, "memory": 15883, "data_time": 0.01036, "decode.loss_ce_combined": 0.8347, "decode.acc_seg": 77.45444, "decode.bin_ce_loss": 0.22357, "aux.loss_ce": 0.26118, "aux.acc_seg": 75.90522, "loss": 1.31945, "time": 0.65515}
{"mode": "train", "epoch": 12, "iter": 3400, "lr": 0.00962, "memory": 15883, "data_time": 0.0107, "decode.loss_ce_combined": 0.83133, "decode.acc_seg": 77.39072, "decode.bin_ce_loss": 0.22553, "aux.loss_ce": 0.26062, "aux.acc_seg": 75.70084, "loss": 1.31749, "time": 0.65237}
{"mode": "train", "epoch": 13, "iter": 3500, "lr": 0.00961, "memory": 15883, "data_time": 0.04317, "decode.loss_ce_combined": 0.79546, "decode.acc_seg": 78.40229, "decode.bin_ce_loss": 0.2112, "aux.loss_ce": 0.25324, "aux.acc_seg": 76.72974, "loss": 1.2599, "time": 0.6865}
{"mode": "train", "epoch": 13, "iter": 3600, "lr": 0.0096, "memory": 15883, "data_time": 0.01124, "decode.loss_ce_combined": 0.79244, "decode.acc_seg": 79.08347, "decode.bin_ce_loss": 0.21752, "aux.loss_ce": 0.25169, "aux.acc_seg": 77.21689, "loss": 1.26165, "time": 0.72091}
{"mode": "train", "epoch": 13, "iter": 3700, "lr": 0.00959, "memory": 15883, "data_time": 0.0111, "decode.loss_ce_combined": 0.83228, "decode.acc_seg": 77.25159, "decode.bin_ce_loss": 0.21732, "aux.loss_ce": 0.26731, "aux.acc_seg": 75.53694, "loss": 1.31691, "time": 0.67724}
{"mode": "train", "epoch": 14, "iter": 3800, "lr": 0.00958, "memory": 15883, "data_time": 0.0646, "decode.loss_ce_combined": 0.79544, "decode.acc_seg": 78.42989, "decode.bin_ce_loss": 0.20927, "aux.loss_ce": 0.25369, "aux.acc_seg": 76.8827, "loss": 1.25839, "time": 0.71958}
{"mode": "train", "epoch": 14, "iter": 3900, "lr": 0.00956, "memory": 15883, "data_time": 0.01134, "decode.loss_ce_combined": 0.80327, "decode.acc_seg": 78.45755, "decode.bin_ce_loss": 0.21628, "aux.loss_ce": 0.25341, "aux.acc_seg": 76.83202, "loss": 1.27296, "time": 0.65908}
