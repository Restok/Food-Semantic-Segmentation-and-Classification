2022-06-29 18:26:55,852 - mmseg - INFO - Multi-processing start method is `None`
2022-06-29 18:26:55,852 - mmseg - INFO - OpenCV num_threads is `<built-in function getNumThreads>
2022-06-29 18:26:55,853 - mmseg - INFO - OMP num threads is 1
2022-06-29 18:26:55,950 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA TITAN V
GPU 1: Quadro P6000
GPU 2,3: NVIDIA TITAN X (Pascal)
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.7, V11.7.64
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.12.0
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.0
OpenCV: 4.6.0
MMCV: 1.5.3
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.7
MMSegmentation: 0.25.0+cc436a5
------------------------------------------------------------

2022-06-29 18:26:55,950 - mmseg - INFO - Distributed training: True
2022-06-29 18:26:56,467 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='MultiEncoderDecoder',
    pretrained='open-mmlab://contrib/mobilenet_v3_large',
    backbone=dict(
        type='MobileNetV3',
        arch='large',
        out_indices=(1, 3, 16),
        norm_cfg=dict(type='SyncBN', eps=0.001, requires_grad=True)),
    decode_head=dict(
        type='MultiDepthwiseSeparableASPPHead',
        in_channels=960,
        in_index=2,
        channels=128,
        dilations=(1, 12, 24, 36),
        c1_in_channels=16,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=11,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(type='CombinedCrossEntropyLoss', loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=960,
        in_index=2,
        channels=128,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=11,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'ADE20KDataset'
data_root = './FoodSeg103/Images'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=12,
    train=dict(
        type='ADE20KDataset',
        data_root='./FoodSeg103/Images',
        img_dir='img_dir_edited/train',
        ann_dir='ann_dir_edited/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='ADE20KDataset',
        data_root='./FoodSeg103/Images',
        img_dir='img_dir_edited/test',
        ann_dir='ann_dir_edited/test',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='ADE20KDataset',
        data_root='./FoodSeg103/Images',
        img_dir='img_dir_edited/test',
        ann_dir='ann_dir_edited/test',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=80000)
checkpoint_config = dict(by_epoch=False, interval=5000, save_optimizer=True)
evaluation = dict(interval=5000, metric='mIoU', pre_eval=True)
seed = 0
work_dir = './work_dirs/deeplabv3plus_mobilenet_multi_food103_80k'
gpu_ids = range(0, 4)
auto_resume = False

2022-06-29 18:27:00,735 - mmseg - INFO - Set random seed to 895301077, deterministic: False
2022-06-29 18:27:01,206 - mmseg - INFO - initialize MobileNetV3 with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://contrib/mobilenet_v3_large'}
2022-06-29 18:27:01,303 - mmseg - INFO - initialize MultiDepthwiseSeparableASPPHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2022-06-29 18:27:01,321 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.layer0.conv.weight - torch.Size([16, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer0.bn.weight - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer0.bn.bias - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.depthwise_conv.conv.weight - torch.Size([16, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.depthwise_conv.bn.weight - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.depthwise_conv.bn.bias - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.linear_conv.conv.weight - torch.Size([16, 16, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.linear_conv.bn.weight - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer1.linear_conv.bn.bias - torch.Size([16]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.expand_conv.conv.weight - torch.Size([64, 16, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.expand_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.expand_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.depthwise_conv.conv.weight - torch.Size([64, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.depthwise_conv.bn.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.depthwise_conv.bn.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.linear_conv.conv.weight - torch.Size([24, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer2.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.expand_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.expand_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.depthwise_conv.conv.weight - torch.Size([72, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.depthwise_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.depthwise_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.linear_conv.conv.weight - torch.Size([24, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.linear_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer3.linear_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.expand_conv.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.expand_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.expand_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.depthwise_conv.conv.weight - torch.Size([72, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.depthwise_conv.bn.weight - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.depthwise_conv.bn.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv1.conv.weight - torch.Size([24, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv1.conv.bias - torch.Size([24]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv2.conv.weight - torch.Size([72, 24, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.se.conv2.conv.bias - torch.Size([72]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.linear_conv.conv.weight - torch.Size([40, 72, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer4.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.expand_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.expand_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.depthwise_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.depthwise_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv1.conv.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.se.conv2.conv.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer5.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.expand_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.expand_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.depthwise_conv.bn.weight - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.depthwise_conv.bn.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv1.conv.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.se.conv2.conv.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.linear_conv.conv.weight - torch.Size([40, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.linear_conv.bn.weight - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer6.linear_conv.bn.bias - torch.Size([40]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.expand_conv.bn.weight - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.expand_conv.bn.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.depthwise_conv.conv.weight - torch.Size([240, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.depthwise_conv.bn.weight - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.depthwise_conv.bn.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.linear_conv.conv.weight - torch.Size([80, 240, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer7.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.expand_conv.conv.weight - torch.Size([200, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.expand_conv.bn.weight - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.expand_conv.bn.bias - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.depthwise_conv.conv.weight - torch.Size([200, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.depthwise_conv.bn.weight - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.depthwise_conv.bn.bias - torch.Size([200]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.linear_conv.conv.weight - torch.Size([80, 200, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer8.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.expand_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.expand_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.depthwise_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.depthwise_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer9.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.expand_conv.conv.weight - torch.Size([184, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.expand_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.expand_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.depthwise_conv.conv.weight - torch.Size([184, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.depthwise_conv.bn.weight - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.depthwise_conv.bn.bias - torch.Size([184]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.linear_conv.conv.weight - torch.Size([80, 184, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.linear_conv.bn.weight - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer10.linear_conv.bn.bias - torch.Size([80]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.expand_conv.conv.weight - torch.Size([480, 80, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.expand_conv.bn.weight - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.expand_conv.bn.bias - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.depthwise_conv.conv.weight - torch.Size([480, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.depthwise_conv.bn.weight - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.depthwise_conv.bn.bias - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv1.conv.weight - torch.Size([120, 480, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv1.conv.bias - torch.Size([120]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv2.conv.weight - torch.Size([480, 120, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.se.conv2.conv.bias - torch.Size([480]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.linear_conv.conv.weight - torch.Size([112, 480, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.linear_conv.bn.weight - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer11.linear_conv.bn.bias - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.expand_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.expand_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.depthwise_conv.conv.weight - torch.Size([672, 1, 3, 3]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.depthwise_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.depthwise_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv1.conv.bias - torch.Size([168]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.se.conv2.conv.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.linear_conv.conv.weight - torch.Size([112, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.linear_conv.bn.weight - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer12.linear_conv.bn.bias - torch.Size([112]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.expand_conv.conv.weight - torch.Size([672, 112, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.expand_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.expand_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.depthwise_conv.conv.weight - torch.Size([672, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.depthwise_conv.bn.weight - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.depthwise_conv.bn.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv1.conv.weight - torch.Size([168, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv1.conv.bias - torch.Size([168]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv2.conv.weight - torch.Size([672, 168, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.se.conv2.conv.bias - torch.Size([672]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.linear_conv.conv.weight - torch.Size([160, 672, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer13.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv1.conv.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.se.conv2.conv.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer14.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.expand_conv.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.expand_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.expand_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.depthwise_conv.conv.weight - torch.Size([960, 1, 5, 5]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.depthwise_conv.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.depthwise_conv.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv1.conv.weight - torch.Size([240, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv1.conv.bias - torch.Size([240]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv2.conv.weight - torch.Size([960, 240, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.se.conv2.conv.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.linear_conv.conv.weight - torch.Size([160, 960, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.linear_conv.bn.weight - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer15.linear_conv.bn.bias - torch.Size([160]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer16.conv.weight - torch.Size([960, 160, 1, 1]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer16.bn.weight - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

backbone.layer16.bn.bias - torch.Size([960]): 
PretrainedInit: load from open-mmlab://contrib/mobilenet_v3_large 

decode_head.conv_seg.weight - torch.Size([11, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.image_pool.1.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.image_pool.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.image_pool.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.0.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.conv.weight - torch.Size([960, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.conv.weight - torch.Size([128, 960, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([128, 640, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.multi_label_classifier.weight - torch.Size([10, 960]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.multi_label_classifier.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.c1_bottleneck.conv.weight - torch.Size([48, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.c1_bottleneck.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.c1_bottleneck.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.conv.weight - torch.Size([176, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.weight - torch.Size([176]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.bias - torch.Size([176]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.conv.weight - torch.Size([128, 176, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([11, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([128, 960, 3, 3]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of MultiEncoderDecoder  
2022-06-29 18:27:01,328 - mmseg - INFO - MultiEncoderDecoder(
  (backbone): MobileNetV3(
    (layer0): ConvModule(
      (conv): Conv2dAdaptivePadding(3, 16, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): SyncBatchNorm(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      (activate): Hardswish()
    )
    (layer1): InvertedResidualV3(
      (depthwise_conv): ConvModule(
        (conv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
        (bn): SyncBatchNorm(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(16, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(64, 64, kernel_size=(3, 3), stride=(2, 2), groups=64, bias=False)
        (bn): SyncBatchNorm(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(24, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(72, 72, kernel_size=(5, 5), stride=(2, 2), groups=72, bias=False)
        (bn): SyncBatchNorm(72, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(24, 72, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(72, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer5): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer6): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
        (bn): SyncBatchNorm(120, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(120, 32, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(32, 120, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(120, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(40, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer7): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(240, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(240, 240, kernel_size=(3, 3), stride=(1, 1), dilation=(2, 2), groups=240, bias=False)
        (bn): SyncBatchNorm(240, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer8): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 200, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(200, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=200, bias=False)
        (bn): SyncBatchNorm(200, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(200, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer9): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=184, bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer10): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 184, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(184, 184, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=184, bias=False)
        (bn): SyncBatchNorm(184, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(184, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer11): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(480, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=480, bias=False)
        (bn): SyncBatchNorm(480, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(480, 120, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(120, 480, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(112, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer12): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(672, 672, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=672, bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(112, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer13): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2dAdaptivePadding(672, 672, kernel_size=(5, 5), stride=(1, 1), dilation=(4, 4), groups=672, bias=False)
        (bn): SyncBatchNorm(672, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(672, 168, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(168, 672, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(672, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer14): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(960, 960, kernel_size=(5, 5), stride=(1, 1), padding=(8, 8), dilation=(4, 4), groups=960, bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(960, 240, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(240, 960, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer15): InvertedResidualV3(
      (expand_conv): ConvModule(
        (conv): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (depthwise_conv): ConvModule(
        (conv): Conv2d(960, 960, kernel_size=(5, 5), stride=(1, 1), padding=(8, 8), dilation=(4, 4), groups=960, bias=False)
        (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
        (activate): Hardswish()
      )
      (se): SELayer(
        (global_avgpool): AdaptiveAvgPool2d(output_size=1)
        (conv1): ConvModule(
          (conv): Conv2d(960, 240, kernel_size=(1, 1), stride=(1, 1))
          (activate): ReLU(inplace=True)
        )
        (conv2): ConvModule(
          (conv): Conv2d(240, 960, kernel_size=(1, 1), stride=(1, 1))
          (activate): HSigmoid()
        )
      )
      (linear_conv): ConvModule(
        (conv): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer16): ConvModule(
      (conv): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), dilation=(4, 4), bias=False)
      (bn): SyncBatchNorm(960, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
      (activate): Hardswish()
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://contrib/mobilenet_v3_large'}
  (decode_head): MultiDepthwiseSeparableASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CombinedCrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(128, 11, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): DepthwiseSeparableASPPModule(
      (0): ConvModule(
        (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=960, bias=False)
          (bn): SyncBatchNorm(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=960, bias=False)
          (bn): SyncBatchNorm(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=960, bias=False)
          (bn): SyncBatchNorm(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(640, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (global_average_pooling): AdaptiveAvgPool2d(output_size=(1, 1))
    (multi_label_classifier): Linear(in_features=960, out_features=10, bias=True)
    (c1_bottleneck): ConvModule(
      (conv): Conv2d(16, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): SyncBatchNorm(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (sep_bottleneck): Sequential(
      (0): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(176, 176, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=176, bias=False)
          (bn): SyncBatchNorm(176, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(176, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(128, 11, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(960, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2022-06-29 18:27:01,499 - mmseg - INFO - Loaded 4559 images
2022-06-29 18:27:02,463 - mmseg - INFO - Loaded 1955 images
2022-06-29 18:27:02,465 - mmseg - INFO - Start running, host: hli5@manectric, work_dir: /nfs/nfs9/home/nobackup/hli5/FoodCV/work_dirs/deeplabv3plus_mobilenet_multi_food103_80k
2022-06-29 18:27:02,465 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-06-29 18:27:02,467 - mmseg - INFO - workflow: [('train', 1)], max: 80000 iters
2022-06-29 18:27:02,467 - mmseg - INFO - Checkpoints will be saved to /nfs/nfs9/home/nobackup/hli5/FoodCV/work_dirs/deeplabv3plus_mobilenet_multi_food103_80k by HardDiskBackend.
2022-06-29 18:29:37,413 - mmseg - INFO - Iter [100/80000]	lr: 9.989e-03, eta: 17:56:32, time: 0.808, data_time: 0.024, memory: 15880, decode.loss_ce_combined: 1.8883, decode.acc_seg: 41.4660, decode.bin_ce_loss: 0.3821, aux.loss_ce: 0.6222, aux.acc_seg: 41.4536, loss: 2.8925
2022-06-29 18:30:44,927 - mmseg - INFO - Iter [200/80000]	lr: 9.978e-03, eta: 16:26:33, time: 0.675, data_time: 0.013, memory: 15880, decode.loss_ce_combined: 1.5102, decode.acc_seg: 57.1940, decode.bin_ce_loss: 0.3489, aux.loss_ce: 0.4788, aux.acc_seg: 55.9042, loss: 2.3378
2022-06-29 18:31:52,861 - mmseg - INFO - Iter [300/80000]	lr: 9.967e-03, eta: 15:57:35, time: 0.679, data_time: 0.066, memory: 15880, decode.loss_ce_combined: 1.3677, decode.acc_seg: 62.3798, decode.bin_ce_loss: 0.3270, aux.loss_ce: 0.4341, aux.acc_seg: 60.5076, loss: 2.1288
2022-06-29 18:32:59,714 - mmseg - INFO - Iter [400/80000]	lr: 9.956e-03, eta: 15:39:04, time: 0.669, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 1.2761, decode.acc_seg: 64.8900, decode.bin_ce_loss: 0.3105, aux.loss_ce: 0.4067, aux.acc_seg: 63.2356, loss: 1.9932
2022-06-29 18:34:08,997 - mmseg - INFO - Iter [500/80000]	lr: 9.944e-03, eta: 15:33:54, time: 0.693, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 1.2477, decode.acc_seg: 66.1766, decode.bin_ce_loss: 0.3141, aux.loss_ce: 0.3958, aux.acc_seg: 63.9232, loss: 1.9576
2022-06-29 18:35:20,252 - mmseg - INFO - Iter [600/80000]	lr: 9.933e-03, eta: 15:34:26, time: 0.713, data_time: 0.064, memory: 15880, decode.loss_ce_combined: 1.1718, decode.acc_seg: 67.9050, decode.bin_ce_loss: 0.2933, aux.loss_ce: 0.3766, aux.acc_seg: 65.1990, loss: 1.8418
2022-06-29 18:36:30,726 - mmseg - INFO - Iter [700/80000]	lr: 9.922e-03, eta: 15:33:00, time: 0.705, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 1.1676, decode.acc_seg: 68.6780, decode.bin_ce_loss: 0.2966, aux.loss_ce: 0.3729, aux.acc_seg: 66.1837, loss: 1.8371
2022-06-29 18:37:39,595 - mmseg - INFO - Iter [800/80000]	lr: 9.911e-03, eta: 15:28:57, time: 0.689, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 1.1242, decode.acc_seg: 69.4589, decode.bin_ce_loss: 0.2900, aux.loss_ce: 0.3560, aux.acc_seg: 67.3433, loss: 1.7702
2022-06-29 18:38:49,931 - mmseg - INFO - Iter [900/80000]	lr: 9.900e-03, eta: 15:27:44, time: 0.703, data_time: 0.038, memory: 15880, decode.loss_ce_combined: 1.1060, decode.acc_seg: 70.1848, decode.bin_ce_loss: 0.2834, aux.loss_ce: 0.3509, aux.acc_seg: 68.0876, loss: 1.7403
2022-06-29 18:39:59,259 - mmseg - INFO - Exp name: deeplabv3plus_mobilenet_multi_food103_80k.py
2022-06-29 18:39:59,260 - mmseg - INFO - Iter [1000/80000]	lr: 9.889e-03, eta: 15:25:11, time: 0.693, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 1.0686, decode.acc_seg: 71.2007, decode.bin_ce_loss: 0.2709, aux.loss_ce: 0.3434, aux.acc_seg: 68.7225, loss: 1.6829
2022-06-29 18:41:08,388 - mmseg - INFO - Iter [1100/80000]	lr: 9.878e-03, eta: 15:22:39, time: 0.691, data_time: 0.013, memory: 15880, decode.loss_ce_combined: 1.0363, decode.acc_seg: 72.4529, decode.bin_ce_loss: 0.2761, aux.loss_ce: 0.3245, aux.acc_seg: 70.2648, loss: 1.6369
2022-06-29 18:42:18,721 - mmseg - INFO - Iter [1200/80000]	lr: 9.866e-03, eta: 15:21:40, time: 0.703, data_time: 0.041, memory: 15880, decode.loss_ce_combined: 1.0385, decode.acc_seg: 72.1282, decode.bin_ce_loss: 0.2755, aux.loss_ce: 0.3243, aux.acc_seg: 70.2843, loss: 1.6383
2022-06-29 18:43:30,417 - mmseg - INFO - Iter [1300/80000]	lr: 9.855e-03, eta: 15:22:01, time: 0.717, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.9914, decode.acc_seg: 73.6820, decode.bin_ce_loss: 0.2650, aux.loss_ce: 0.3125, aux.acc_seg: 71.3244, loss: 1.5689
2022-06-29 18:44:40,319 - mmseg - INFO - Iter [1400/80000]	lr: 9.844e-03, eta: 15:20:29, time: 0.699, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.9944, decode.acc_seg: 73.2434, decode.bin_ce_loss: 0.2637, aux.loss_ce: 0.3156, aux.acc_seg: 71.2582, loss: 1.5737
2022-06-29 18:45:50,862 - mmseg - INFO - Iter [1500/80000]	lr: 9.833e-03, eta: 15:19:33, time: 0.705, data_time: 0.066, memory: 15880, decode.loss_ce_combined: 0.9544, decode.acc_seg: 74.2794, decode.bin_ce_loss: 0.2507, aux.loss_ce: 0.3000, aux.acc_seg: 72.3880, loss: 1.5051
2022-06-29 18:46:59,845 - mmseg - INFO - Iter [1600/80000]	lr: 9.822e-03, eta: 15:17:19, time: 0.690, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.9900, decode.acc_seg: 73.8206, decode.bin_ce_loss: 0.2677, aux.loss_ce: 0.3100, aux.acc_seg: 71.8870, loss: 1.5676
2022-06-29 18:48:06,252 - mmseg - INFO - Iter [1700/80000]	lr: 9.811e-03, eta: 15:13:14, time: 0.664, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.9679, decode.acc_seg: 73.8702, decode.bin_ce_loss: 0.2550, aux.loss_ce: 0.3022, aux.acc_seg: 72.0890, loss: 1.5252
2022-06-29 18:49:19,407 - mmseg - INFO - Iter [1800/80000]	lr: 9.799e-03, eta: 15:14:22, time: 0.732, data_time: 0.047, memory: 15880, decode.loss_ce_combined: 0.9347, decode.acc_seg: 74.6876, decode.bin_ce_loss: 0.2441, aux.loss_ce: 0.2956, aux.acc_seg: 73.0752, loss: 1.4745
2022-06-29 18:50:29,839 - mmseg - INFO - Iter [1900/80000]	lr: 9.788e-03, eta: 15:13:23, time: 0.704, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.9316, decode.acc_seg: 75.2330, decode.bin_ce_loss: 0.2473, aux.loss_ce: 0.2932, aux.acc_seg: 73.3492, loss: 1.4722
2022-06-29 18:51:39,719 - mmseg - INFO - Exp name: deeplabv3plus_mobilenet_multi_food103_80k.py
2022-06-29 18:51:39,719 - mmseg - INFO - Iter [2000/80000]	lr: 9.777e-03, eta: 15:12:01, time: 0.699, data_time: 0.051, memory: 15880, decode.loss_ce_combined: 0.9635, decode.acc_seg: 74.0745, decode.bin_ce_loss: 0.2585, aux.loss_ce: 0.3017, aux.acc_seg: 72.3610, loss: 1.5237
2022-06-29 18:52:50,438 - mmseg - INFO - Iter [2100/80000]	lr: 9.766e-03, eta: 15:11:12, time: 0.707, data_time: 0.010, memory: 15880, decode.loss_ce_combined: 0.9031, decode.acc_seg: 76.0705, decode.bin_ce_loss: 0.2408, aux.loss_ce: 0.2840, aux.acc_seg: 74.2218, loss: 1.4280
2022-06-29 18:53:59,247 - mmseg - INFO - Iter [2200/80000]	lr: 9.755e-03, eta: 15:09:13, time: 0.688, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.8935, decode.acc_seg: 75.8447, decode.bin_ce_loss: 0.2374, aux.loss_ce: 0.2820, aux.acc_seg: 74.1957, loss: 1.4129
2022-06-29 18:55:11,608 - mmseg - INFO - Iter [2300/80000]	lr: 9.744e-03, eta: 15:09:19, time: 0.724, data_time: 0.047, memory: 15880, decode.loss_ce_combined: 0.9026, decode.acc_seg: 75.7409, decode.bin_ce_loss: 0.2393, aux.loss_ce: 0.2836, aux.acc_seg: 74.1062, loss: 1.4255
2022-06-29 18:56:20,793 - mmseg - INFO - Iter [2400/80000]	lr: 9.732e-03, eta: 15:07:35, time: 0.692, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.8888, decode.acc_seg: 76.3827, decode.bin_ce_loss: 0.2373, aux.loss_ce: 0.2773, aux.acc_seg: 74.9228, loss: 1.4034
2022-06-29 18:57:30,022 - mmseg - INFO - Iter [2500/80000]	lr: 9.721e-03, eta: 15:05:56, time: 0.692, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.8918, decode.acc_seg: 76.0463, decode.bin_ce_loss: 0.2386, aux.loss_ce: 0.2803, aux.acc_seg: 74.4936, loss: 1.4107
2022-06-29 18:58:39,553 - mmseg - INFO - Iter [2600/80000]	lr: 9.710e-03, eta: 15:04:28, time: 0.695, data_time: 0.045, memory: 15880, decode.loss_ce_combined: 0.8711, decode.acc_seg: 76.3444, decode.bin_ce_loss: 0.2309, aux.loss_ce: 0.2755, aux.acc_seg: 74.8565, loss: 1.3775
2022-06-29 18:59:49,422 - mmseg - INFO - Iter [2700/80000]	lr: 9.699e-03, eta: 15:03:10, time: 0.699, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.8575, decode.acc_seg: 76.9447, decode.bin_ce_loss: 0.2245, aux.loss_ce: 0.2731, aux.acc_seg: 75.2881, loss: 1.3550
2022-06-29 19:00:59,540 - mmseg - INFO - Iter [2800/80000]	lr: 9.688e-03, eta: 15:02:00, time: 0.701, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.8613, decode.acc_seg: 76.8334, decode.bin_ce_loss: 0.2340, aux.loss_ce: 0.2699, aux.acc_seg: 75.3220, loss: 1.3652
2022-06-29 19:02:10,859 - mmseg - INFO - Iter [2900/80000]	lr: 9.677e-03, eta: 15:01:23, time: 0.713, data_time: 0.045, memory: 15880, decode.loss_ce_combined: 0.8519, decode.acc_seg: 77.2639, decode.bin_ce_loss: 0.2329, aux.loss_ce: 0.2669, aux.acc_seg: 75.6526, loss: 1.3518
2022-06-29 19:03:21,448 - mmseg - INFO - Exp name: deeplabv3plus_mobilenet_multi_food103_80k.py
2022-06-29 19:03:21,449 - mmseg - INFO - Iter [3000/80000]	lr: 9.665e-03, eta: 15:00:24, time: 0.706, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.8939, decode.acc_seg: 76.0541, decode.bin_ce_loss: 0.2350, aux.loss_ce: 0.2801, aux.acc_seg: 74.7213, loss: 1.4091
2022-06-29 19:04:33,498 - mmseg - INFO - Iter [3100/80000]	lr: 9.654e-03, eta: 15:00:00, time: 0.720, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.8304, decode.acc_seg: 77.8438, decode.bin_ce_loss: 0.2228, aux.loss_ce: 0.2603, aux.acc_seg: 76.2246, loss: 1.3136
2022-06-29 19:05:44,840 - mmseg - INFO - Iter [3200/80000]	lr: 9.643e-03, eta: 14:59:17, time: 0.714, data_time: 0.060, memory: 15880, decode.loss_ce_combined: 0.8244, decode.acc_seg: 77.6282, decode.bin_ce_loss: 0.2176, aux.loss_ce: 0.2616, aux.acc_seg: 75.9314, loss: 1.3036
2022-06-29 19:06:53,871 - mmseg - INFO - Iter [3300/80000]	lr: 9.632e-03, eta: 14:57:38, time: 0.690, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.8396, decode.acc_seg: 77.2650, decode.bin_ce_loss: 0.2222, aux.loss_ce: 0.2655, aux.acc_seg: 75.6474, loss: 1.3273
2022-06-29 19:08:01,558 - mmseg - INFO - Iter [3400/80000]	lr: 9.621e-03, eta: 14:55:31, time: 0.677, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.8364, decode.acc_seg: 77.5269, decode.bin_ce_loss: 0.2236, aux.loss_ce: 0.2631, aux.acc_seg: 75.9174, loss: 1.3231
2022-06-29 19:09:11,819 - mmseg - INFO - Iter [3500/80000]	lr: 9.609e-03, eta: 14:54:23, time: 0.702, data_time: 0.042, memory: 15880, decode.loss_ce_combined: 0.7949, decode.acc_seg: 78.5905, decode.bin_ce_loss: 0.2117, aux.loss_ce: 0.2522, aux.acc_seg: 77.0988, loss: 1.2587
2022-06-29 19:10:21,207 - mmseg - INFO - Iter [3600/80000]	lr: 9.598e-03, eta: 14:52:57, time: 0.694, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.8264, decode.acc_seg: 77.8247, decode.bin_ce_loss: 0.2201, aux.loss_ce: 0.2586, aux.acc_seg: 76.4506, loss: 1.3050
2022-06-29 19:11:28,295 - mmseg - INFO - Iter [3700/80000]	lr: 9.587e-03, eta: 14:50:44, time: 0.671, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.8304, decode.acc_seg: 77.3605, decode.bin_ce_loss: 0.2217, aux.loss_ce: 0.2626, aux.acc_seg: 75.8743, loss: 1.3147
2022-06-29 19:12:42,185 - mmseg - INFO - Iter [3800/80000]	lr: 9.576e-03, eta: 14:50:51, time: 0.739, data_time: 0.062, memory: 15880, decode.loss_ce_combined: 0.8041, decode.acc_seg: 78.7253, decode.bin_ce_loss: 0.2076, aux.loss_ce: 0.2596, aux.acc_seg: 76.9125, loss: 1.2713
2022-06-29 19:13:50,755 - mmseg - INFO - Iter [3900/80000]	lr: 9.565e-03, eta: 14:49:10, time: 0.686, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.8032, decode.acc_seg: 78.2135, decode.bin_ce_loss: 0.2147, aux.loss_ce: 0.2548, aux.acc_seg: 76.3921, loss: 1.2728
2022-06-29 19:15:00,652 - mmseg - INFO - Exp name: deeplabv3plus_mobilenet_multi_food103_80k.py
2022-06-29 19:15:00,653 - mmseg - INFO - Iter [4000/80000]	lr: 9.553e-03, eta: 14:47:56, time: 0.699, data_time: 0.044, memory: 15880, decode.loss_ce_combined: 0.8131, decode.acc_seg: 77.8398, decode.bin_ce_loss: 0.2157, aux.loss_ce: 0.2563, aux.acc_seg: 76.4060, loss: 1.2850
2022-06-29 19:16:08,955 - mmseg - INFO - Iter [4100/80000]	lr: 9.542e-03, eta: 14:46:13, time: 0.683, data_time: 0.010, memory: 15880, decode.loss_ce_combined: 0.7824, decode.acc_seg: 78.7062, decode.bin_ce_loss: 0.2040, aux.loss_ce: 0.2520, aux.acc_seg: 76.7328, loss: 1.2384
2022-06-29 19:17:19,008 - mmseg - INFO - Iter [4200/80000]	lr: 9.531e-03, eta: 14:45:03, time: 0.701, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.7975, decode.acc_seg: 78.1649, decode.bin_ce_loss: 0.2069, aux.loss_ce: 0.2540, aux.acc_seg: 76.6907, loss: 1.2585
2022-06-29 19:18:30,523 - mmseg - INFO - Iter [4300/80000]	lr: 9.520e-03, eta: 14:44:18, time: 0.715, data_time: 0.044, memory: 15880, decode.loss_ce_combined: 0.7720, decode.acc_seg: 79.2607, decode.bin_ce_loss: 0.2126, aux.loss_ce: 0.2432, aux.acc_seg: 77.6023, loss: 1.2278
2022-06-29 19:19:40,294 - mmseg - INFO - Iter [4400/80000]	lr: 9.509e-03, eta: 14:43:03, time: 0.698, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.7620, decode.acc_seg: 79.3216, decode.bin_ce_loss: 0.2069, aux.loss_ce: 0.2430, aux.acc_seg: 77.5633, loss: 1.2119
2022-06-29 19:20:50,072 - mmseg - INFO - Iter [4500/80000]	lr: 9.497e-03, eta: 14:41:48, time: 0.698, data_time: 0.011, memory: 15880, decode.loss_ce_combined: 0.7933, decode.acc_seg: 78.4665, decode.bin_ce_loss: 0.2137, aux.loss_ce: 0.2518, aux.acc_seg: 76.8565, loss: 1.2587
2022-06-29 19:22:00,748 - mmseg - INFO - Iter [4600/80000]	lr: 9.486e-03, eta: 14:40:47, time: 0.707, data_time: 0.052, memory: 15880, decode.loss_ce_combined: 0.7718, decode.acc_seg: 78.8370, decode.bin_ce_loss: 0.2053, aux.loss_ce: 0.2456, aux.acc_seg: 77.3197, loss: 1.2228
2022-06-29 19:23:10,273 - mmseg - INFO - Iter [4700/80000]	lr: 9.475e-03, eta: 14:39:28, time: 0.695, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.7628, decode.acc_seg: 79.3114, decode.bin_ce_loss: 0.2018, aux.loss_ce: 0.2454, aux.acc_seg: 77.4411, loss: 1.2100
2022-06-29 19:24:19,241 - mmseg - INFO - Iter [4800/80000]	lr: 9.464e-03, eta: 14:38:01, time: 0.690, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.7889, decode.acc_seg: 78.2387, decode.bin_ce_loss: 0.2052, aux.loss_ce: 0.2512, aux.acc_seg: 76.7323, loss: 1.2453
2022-06-29 19:25:29,196 - mmseg - INFO - Iter [4900/80000]	lr: 9.453e-03, eta: 14:36:49, time: 0.700, data_time: 0.039, memory: 15880, decode.loss_ce_combined: 0.7391, decode.acc_seg: 80.1198, decode.bin_ce_loss: 0.1995, aux.loss_ce: 0.2358, aux.acc_seg: 78.7101, loss: 1.1744
2022-06-29 19:26:38,701 - mmseg - INFO - Saving checkpoint at 5000 iterations
2022-06-29 19:26:39,369 - mmseg - INFO - Exp name: deeplabv3plus_mobilenet_multi_food103_80k.py
2022-06-29 19:26:39,369 - mmseg - INFO - Iter [5000/80000]	lr: 9.441e-03, eta: 14:35:41, time: 0.702, data_time: 0.012, memory: 15880, decode.loss_ce_combined: 0.7829, decode.acc_seg: 78.7869, decode.bin_ce_loss: 0.2130, aux.loss_ce: 0.2458, aux.acc_seg: 77.2410, loss: 1.2417
